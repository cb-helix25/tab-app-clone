{"version":3,"file":"static/js/634.cabc1492.chunk.js","mappings":"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","sources":["CustomForms/SnippetEditsApproval.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\n// invisible change\r\nimport { Stack, DefaultButton, Text } from '@fluentui/react';\r\nimport { mergeStyles } from '@fluentui/react';\r\nimport { colours } from '../app/styles/colours';\r\nimport { componentTokens } from '../app/styles/componentTokens';\r\nimport {\r\n    sharedPrimaryButtonStyles,\r\n    sharedDefaultButtonStyles,\r\n} from '../app/styles/ButtonStyles';\r\n\r\nexport interface SnippetEdit {\r\n    id: number;\r\n    snippetId: number;\r\n    blockTitle: string;\r\n    currentText: string;\r\n    currentLabel?: string;\r\n    currentSortOrder?: number;\r\n    currentBlockId?: number;\r\n    currentCreatedBy?: string;\r\n    currentCreatedAt?: string;\r\n    currentUpdatedBy?: string;\r\n    currentUpdatedAt?: string;\r\n    currentApprovedBy?: string;\r\n    currentApprovedAt?: string;\r\n    currentIsApproved?: boolean;\r\n    currentVersion?: number;\r\n    proposedText: string;\r\n    proposedLabel?: string;\r\n    proposedSortOrder?: number;\r\n    proposedBlockId?: number;\r\n    isNew?: boolean;\r\n    submittedBy: string;\r\n    submittedAt?: string;\r\n    reviewNotes?: string;\r\n    reviewedBy?: string;\r\n    reviewedAt?: string;\r\n    status?: string;\r\n}\r\n\r\ninterface SnippetEditsApprovalProps {\r\n    edits: SnippetEdit[];\r\n    onApprove: (id: number) => void;\r\n    onReject: (id: number) => void;\r\n    onClose: () => void;\r\n}\r\n\r\nconst containerStyle = mergeStyles({\r\n    padding: 20,\r\n    backgroundColor: colours.light.sectionBackground,\r\n    borderRadius: componentTokens.card.base.borderRadius,\r\n    boxShadow: componentTokens.card.base.boxShadow,\r\n});\r\n\r\nconst cardStyle = mergeStyles({\r\n    border: `1px solid ${colours.light.border}`,\r\n    padding: componentTokens.card.base.padding,\r\n    borderRadius: componentTokens.card.base.borderRadius,\r\n    backgroundColor: colours.light.cardBackground,\r\n    boxShadow: componentTokens.card.base.boxShadow,\r\n});\r\n\r\nconst SnippetEditsApproval: React.FC<SnippetEditsApprovalProps> = ({\r\n    edits,\r\n    onApprove,\r\n    onReject,\r\n    onClose,\r\n}) => {\r\n    const [blockMap, setBlockMap] = useState<Record<number, string>>({});\r\n\r\n    useEffect(() => {\r\n        const stored = sessionStorage.getItem('prefetchedBlocksData');\r\n        if (stored) {\r\n            try {\r\n                const blocks = JSON.parse(stored);\r\n                const map: Record<number, string> = {};\r\n                (blocks as any[]).forEach((b) => {\r\n                    const id = b.BlockId ?? b.blockId;\r\n                    const title = b.Title || b.title;\r\n                    if (id != null) map[id] = title;\r\n                });\r\n                setBlockMap(map);\r\n            } catch {\r\n                // ignore parse errors\r\n            }\r\n        }\r\n    }, []);\r\n    return (\r\n        <Stack className={containerStyle} tokens={{ childrenGap: 16 }}>\r\n            {edits.map((edit) => {\r\n                const proposedBlockTitle = edit.proposedBlockId ? blockMap[edit.proposedBlockId] : undefined;\r\n                const currentBlockTitle = edit.currentBlockId ? blockMap[edit.currentBlockId] : edit.blockTitle;\r\n                return (\r\n                    <Stack key={edit.id} tokens={{ childrenGap: 8 }} className={cardStyle}>\r\n                        <Text variant=\"mediumPlus\">{currentBlockTitle}</Text>\r\n                        <Text variant=\"small\">Snippet ID: {edit.snippetId}</Text>\r\n                        <Text variant=\"small\">This change will update the snippet used in the pitch builder.</Text>\r\n                        <Stack horizontal tokens={{ childrenGap: 16 }} styles={{ root: { alignItems: 'flex-start' } }}>\r\n                            <Stack grow tokens={{ childrenGap: 4 }}>\r\n                                <Text variant=\"smallPlus\">Current</Text>\r\n                                <Text variant=\"small\">{edit.currentText}</Text>\r\n                                <Text variant=\"small\">Label: {edit.currentLabel || 'N/A'}</Text>\r\n                                {typeof edit.currentSortOrder === 'number' && (\r\n                                    <Text variant=\"small\">Sort order: {edit.currentSortOrder}</Text>\r\n                                )}\r\n                            </Stack>\r\n                            <Stack grow tokens={{ childrenGap: 4 }}>\r\n                                <Text variant=\"smallPlus\">Proposed</Text>\r\n                                <Text>{edit.proposedText}</Text>\r\n                                {edit.proposedLabel && <Text>Label: {edit.proposedLabel}</Text>}\r\n                                {typeof edit.proposedSortOrder === 'number' && (\r\n                                    <Text>Sort order: {edit.proposedSortOrder}</Text>\r\n                                )}\r\n                                {edit.proposedBlockId && (\r\n                                    <Text>Block: {proposedBlockTitle || edit.proposedBlockId}</Text>\r\n                                )}\r\n                                {edit.isNew && <Text variant=\"small\">New snippet</Text>}\r\n                            </Stack>\r\n                        </Stack>\r\n                        <Text variant=\"small\">Submitted by {edit.submittedBy}</Text>\r\n                        {edit.submittedAt && (\r\n                            <Text variant=\"small\">Submitted at {new Date(edit.submittedAt).toLocaleString()}</Text>\r\n                        )}\r\n                        {edit.reviewNotes && (\r\n                            <Text variant=\"small\">Notes: {edit.reviewNotes}</Text>\r\n                        )}\r\n                        {edit.reviewedBy && (\r\n                            <Text variant=\"small\">Reviewed by {edit.reviewedBy}</Text>\r\n                        )}\r\n                        {edit.reviewedAt && (\r\n                            <Text variant=\"small\">Reviewed at {new Date(edit.reviewedAt).toLocaleString()}</Text>\r\n                        )}\r\n                        {edit.status && <Text variant=\"small\">Status: {edit.status}</Text>}\r\n                        <Stack horizontal tokens={{ childrenGap: 8 }}>\r\n                            <DefaultButton\r\n                                text=\"Approve\"\r\n                                onClick={() => onApprove(edit.id)}\r\n                                styles={sharedPrimaryButtonStyles}\r\n                            />\r\n                            <DefaultButton\r\n                                text=\"Reject\"\r\n                                onClick={() => onReject(edit.id)}\r\n                                styles={sharedDefaultButtonStyles}\r\n                            />\r\n                        </Stack>\r\n                    </Stack>\r\n                );\r\n            })}\r\n            {edits.length === 0 && <Text>No pending edits.</Text>}\r\n            <DefaultButton text=\"Close\" onClick={onClose} styles={sharedDefaultButtonStyles} />\r\n        </Stack>\r\n    );\r\n};\r\n\r\nexport default SnippetEditsApproval;"],"names":["containerStyle","mergeStyles","padding","backgroundColor","colours","light","sectionBackground","borderRadius","componentTokens","card","base","boxShadow","cardStyle","border","cardBackground","_ref","edits","onApprove","onReject","onClose","blockMap","setBlockMap","useState","useEffect","stored","sessionStorage","getItem","blocks","JSON","parse","map","forEach","b","_b$BlockId","id","BlockId","blockId","title","Title","_jsxs","Stack","className","tokens","childrenGap","children","edit","proposedBlockTitle","proposedBlockId","undefined","currentBlockTitle","currentBlockId","blockTitle","_jsx","Text","variant","snippetId","horizontal","styles","root","alignItems","grow","currentText","currentLabel","currentSortOrder","proposedText","proposedLabel","proposedSortOrder","isNew","submittedBy","submittedAt","Date","toLocaleString","reviewNotes","reviewedBy","reviewedAt","status","DefaultButton","text","onClick","sharedPrimaryButtonStyles","sharedDefaultButtonStyles","length"],"sourceRoot":""}