{"version":3,"file":"static/js/786.72c7a31a.chunk.js","mappings":"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","sources":["components/DataFlowDiagram.tsx"],"sourcesContent":["import React, { useEffect, useMemo, useRef, useState } from 'react';\r\nimport { Icon } from '@fluentui/react';\r\nimport { useTheme } from '../app/functionality/ThemeContext';\r\nimport { colours } from '../app/styles/colours';\r\n\r\ntype Node = {\r\n  id: string;\r\n  label: string;\r\n  lane: 'Client' | 'Server' | 'Functions' | 'Data' | 'External';\r\n  x: number; // column index\r\n  y: number; // row index within lane\r\n};\r\n\r\ntype Edge = {\r\n  from: string;\r\n  to: string;\r\n  label?: string;\r\n};\r\n\r\n/**\r\n * Renders a lane-based SVG diagram of the application's data flow.\r\n * Lanes: Client → Server → Functions → Data/External\r\n */\r\nconst DataFlowDiagram: React.FC = () => {\r\n  const { isDarkMode } = useTheme();\r\n  const laneOrder: Array<Node['lane']> = ['Client', 'Server', 'Functions', 'Data', 'External'];\r\n  // dynamic sizing values\r\n  const containerPadding = 12;\r\n  const laneGap = 28; // horizontal gap between lanes\r\n  const laneVGap = 40; // vertical gap between lane rows\r\n  let laneHeight = 200;\r\n  let nodeW = 170;\r\n  const nodeH = 40;\r\n  const vGap = 20;\r\n\r\n  // Measure container width to wrap lanes into rows responsively\r\n  const containerRef = useRef<HTMLDivElement>(null);\r\n  const [containerWidth, setContainerWidth] = useState<number>(900);\r\n  useEffect(() => {\r\n    const el = containerRef.current;\r\n    if (!el) return;\r\n    const ro = new ResizeObserver(entries => {\r\n      for (const entry of entries) {\r\n        const w = entry.contentRect.width;\r\n        if (w && Math.abs(w - containerWidth) > 1) setContainerWidth(w);\r\n      }\r\n    });\r\n    ro.observe(el);\r\n    return () => ro.disconnect();\r\n  }, [containerWidth]);\r\n\r\n  const nodes: Node[] = [\r\n    // Client\r\n    { id: 'client-tabs', label: 'Teams Tab (React)', lane: 'Client', x: 0, y: 0 },\r\n    { id: 'client-admin', label: 'Admin Dashboard', lane: 'Client', x: 0, y: 1 },\r\n\r\n    // Server\r\n    { id: 'server-express', label: 'Express API (/api/*)', lane: 'Server', x: 1, y: 0 },\r\n    { id: 'server-proxy', label: 'Proxy → Azure Functions', lane: 'Server', x: 1, y: 1 },\r\n    { id: 'server-sql', label: 'SQL-backed routes (instructions, deals)', lane: 'Server', x: 1, y: 2 },\r\n\r\n    // Functions\r\n    { id: 'func-ts', label: 'Functions (TS, 7072)', lane: 'Functions', x: 2, y: 0 },\r\n    { id: 'func-js', label: 'Decoupled (JS, 7071)', lane: 'Functions', x: 2, y: 1 },\r\n    { id: 'func-email', label: 'sendEmail (Graph)', lane: 'Functions', x: 2, y: 2 },\r\n\r\n    // Data\r\n    { id: 'data-sql', label: 'Azure SQL Database', lane: 'Data', x: 3, y: 0 },\r\n    { id: 'data-kv', label: 'Key Vault (secrets)', lane: 'Data', x: 3, y: 1 },\r\n    { id: 'data-storage', label: 'Blob/Queue (Azurite dev)', lane: 'Data', x: 3, y: 2 },\r\n\r\n    // External\r\n    { id: 'ext-graph', label: 'Microsoft Graph (Email)', lane: 'External', x: 4, y: 0 },\r\n    { id: 'ext-clio', label: 'Clio API', lane: 'External', x: 4, y: 1 },\r\n  ];\r\n\r\n  const edges: Edge[] = [\r\n    // Client → Server\r\n    { from: 'client-tabs', to: 'server-express', label: 'HTTPS /api/*' },\r\n    { from: 'client-admin', to: 'server-express' },\r\n\r\n    // Server internals\r\n    { from: 'server-express', to: 'server-proxy', label: 'when needed' },\r\n    { from: 'server-express', to: 'server-sql', label: 'parameterised SQL' },\r\n\r\n    // Server ↔ Functions\r\n    { from: 'server-proxy', to: 'func-ts' },\r\n    { from: 'server-proxy', to: 'func-js' },\r\n    { from: 'server-proxy', to: 'func-email' },\r\n\r\n    // Functions/Data\r\n    { from: 'func-ts', to: 'data-kv', label: 'secrets' },\r\n    { from: 'func-js', to: 'data-kv', label: 'secrets' },\r\n    { from: 'func-email', to: 'data-kv', label: 'secrets' },\r\n    { from: 'server-sql', to: 'data-sql' },\r\n    { from: 'func-ts', to: 'data-storage' },\r\n    { from: 'func-js', to: 'data-storage' },\r\n\r\n    // External services\r\n    { from: 'func-email', to: 'ext-graph', label: 'sendMail' },\r\n    { from: 'server-express', to: 'ext-clio', label: 'matters, contacts' },\r\n  ];\r\n\r\n  const laneColor = isDarkMode ? 'rgba(255,255,255,0.04)' : 'rgba(0,0,0,0.03)';\r\n  const border = isDarkMode ? '1px solid rgba(255,255,255,0.10)' : '1px solid rgba(0,0,0,0.08)';\r\n  const textColor = isDarkMode ? colours.dark.text : colours.light.text;\r\n\r\n  // Compute columns per row based on container width\r\n  const columns = useMemo(() => {\r\n    const minCols = 1;\r\n    const maxCols = laneOrder.length;\r\n    // estimate using a target lane width when container is small\r\n    const targetLaneWidth = 260;\r\n    const totalLaneSpace = targetLaneWidth + laneGap; // per column\r\n    if (!containerWidth || containerWidth < targetLaneWidth) return 1;\r\n    // Leave slight padding margin\r\n    const usable = Math.max(0, containerWidth - containerPadding * 2);\r\n    const cols = Math.floor((usable + laneGap) / totalLaneSpace);\r\n    return Math.max(minCols, Math.min(maxCols, cols || 1));\r\n  }, [containerWidth]);\r\n\r\n  const laneColsRows = useMemo(() => {\r\n    const rows = Math.ceil(laneOrder.length / columns);\r\n    return { rows, columns };\r\n  }, [columns]);\r\n\r\n  // Compute lane width to fill the container evenly\r\n  const laneWidth = useMemo(() => {\r\n    const totalGaps = laneGap * (columns - 1);\r\n    const usable = Math.max(0, containerWidth - containerPadding * 2 - totalGaps);\r\n    const w = Math.floor(usable / columns);\r\n    return Math.max(220, w); // clamp min width\r\n  }, [containerWidth, columns]);\r\n\r\n  // Compute node width relative to lane width\r\n  nodeW = Math.min(260, Math.max(140, laneWidth - 40));\r\n\r\n  // Compute lane height based on busiest lane\r\n  const maxRowsPerLane = useMemo(() => {\r\n    const map: Record<string, number> = {};\r\n    for (const n of nodes) {\r\n      map[n.lane] = Math.max(map[n.lane] ?? 0, (n.y + 1));\r\n    }\r\n    return Math.max(1, ...Object.values(map));\r\n  }, []);\r\n  laneHeight = Math.max(160, 18 + maxRowsPerLane * (nodeH + vGap));\r\n\r\n  const lanePos = (laneIndex: number) => {\r\n    const col = laneIndex % laneColsRows.columns;\r\n    const row = Math.floor(laneIndex / laneColsRows.columns);\r\n    const x = col * (laneWidth + laneGap);\r\n    const y = row * (laneHeight + laneVGap);\r\n    return { x, y };\r\n  };\r\n\r\n  const nodePos = (n: Node) => {\r\n    const idx = laneOrder.indexOf(n.lane);\r\n    const lane = lanePos(idx);\r\n    const padding = 18;\r\n    const x = lane.x + (laneWidth - nodeW) / 2;\r\n    const y = lane.y + padding + n.y * (nodeH + vGap);\r\n    return { x, y };\r\n  };\r\n\r\n  const svgWidth = Math.max(1, laneColsRows.columns * (laneWidth + laneGap) - laneGap);\r\n  const svgHeight = Math.max(1, laneColsRows.rows * (laneHeight + laneVGap) - laneVGap + 20);\r\n\r\n  const nodeMap = new Map(nodes.map(n => [n.id, n] as const));\r\n\r\n  const arrow = (fromId: string, toId: string, label?: string) => {\r\n    const from = nodeMap.get(fromId)!;\r\n    const to = nodeMap.get(toId)!;\r\n    const p1 = nodePos(from);\r\n    const p2 = nodePos(to);\r\n    const startX = p1.x + nodeW;\r\n    const startY = p1.y + nodeH / 2;\r\n    const endX = p2.x;\r\n    const endY = p2.y + nodeH / 2;\r\n    // Control points for a smooth curve regardless of row/col positions\r\n    const dx = Math.max(40, Math.abs(endX - startX) * 0.4);\r\n    const cp1X = startX + dx;\r\n    const cp1Y = startY;\r\n    const cp2X = endX - dx;\r\n    const cp2Y = endY;\r\n    const path = `M ${startX} ${startY} C ${cp1X} ${cp1Y}, ${cp2X} ${cp2Y}, ${endX - 10} ${endY}`;\r\n    const isProxy = fromId === 'server-proxy';\r\n    const strokeDasharray = isProxy ? '6,4' : undefined;\r\n    return (\r\n      <g key={`${fromId}->${toId}`}>\r\n        <path d={path} stroke={isDarkMode ? '#6ea8d6' : '#3690CE'} strokeWidth={2} fill=\"none\" markerEnd=\"url(#arrow)\" strokeDasharray={strokeDasharray} />\r\n        {label && (\r\n          <text x={(startX + endX) / 2} y={(startY + endY) / 2 - 6} textAnchor=\"middle\" fontSize={11} fill={isDarkMode ? '#cbd5e1' : '#334155'}>\r\n            {label}\r\n          </text>\r\n        )}\r\n      </g>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div ref={containerRef} style={{\r\n      border,\r\n      borderRadius: 8,\r\n      padding: 12,\r\n      background: `linear-gradient(135deg, ${isDarkMode ? colours.dark.background : '#FFFFFF'} 0%, ${isDarkMode ? colours.dark.background : '#F8FAFC'} 100%)`,\r\n      boxShadow: isDarkMode ? '0 4px 6px rgba(0,0,0,0.3)' : '0 4px 6px rgba(0,0,0,0.07)'\r\n    }}>\r\n  <svg width=\"100%\" height={svgHeight} viewBox={`0 0 ${svgWidth} ${svgHeight}`} preserveAspectRatio=\"xMidYMin meet\" role=\"img\" aria-label=\"Application data flow diagram\">\r\n        <defs>\r\n          <marker id=\"arrow\" markerWidth=\"10\" markerHeight=\"10\" refX=\"10\" refY=\"3\" orient=\"auto\" markerUnits=\"strokeWidth\">\r\n            <path d=\"M0,0 L0,6 L9,3 z\" fill={isDarkMode ? '#6ea8d6' : '#3690CE'} />\r\n          </marker>\r\n        </defs>\r\n\r\n        {laneOrder.map((lane, i) => {\r\n          const lp = lanePos(i);\r\n          return (\r\n            <g key={lane}>\r\n              <rect x={lp.x} y={lp.y} width={laneWidth} height={laneHeight} rx={8} ry={8} fill={laneColor} />\r\n              <text x={lp.x + laneWidth / 2} y={lp.y + 16} textAnchor=\"middle\" fontSize={12} fill={isDarkMode ? '#cbd5e1' : '#334155'}>\r\n                {lane}\r\n              </text>\r\n            </g>\r\n          );\r\n        })}\r\n\r\n        {/* Edges underneath nodes */}\r\n        {edges.map(e => arrow(e.from, e.to, e.label))}\r\n\r\n  {/* Nodes */}\r\n        {nodes.map(n => {\r\n          const p = nodePos(n);\r\n          const gradId = `grad-${n.id}`;\r\n          const light = ['#FFFFFF', '#F8FAFC'];\r\n          const dark = [colours.dark.background, colours.dark.background];\r\n          const [c1, c2] = isDarkMode ? dark : light;\r\n          return (\r\n            <g key={n.id}>\r\n              <defs>\r\n                <linearGradient id={gradId} x1=\"0\" y1=\"0\" x2=\"1\" y2=\"1\">\r\n                  <stop offset=\"0%\" stopColor={c1} />\r\n                  <stop offset=\"100%\" stopColor={c2} />\r\n                </linearGradient>\r\n              </defs>\r\n              <rect x={p.x} y={p.y} width={nodeW} height={nodeH} rx={8} ry={8} fill={`url(#${gradId})`} stroke={isDarkMode ? 'rgba(255,255,255,0.2)' : 'rgba(0,0,0,0.15)'} />\r\n              <text x={p.x + nodeW / 2} y={p.y + nodeH / 2 + 4} textAnchor=\"middle\" fontSize={12} fill={textColor}>\r\n                {n.label}\r\n              </text>\r\n            </g>\r\n          );\r\n        })}\r\n      </svg>\r\n\r\n      {/* Visual legend (subtle Fluent UI icons) */}\r\n      <div style={{ display: 'flex', flexWrap: 'wrap', gap: 12, alignItems: 'center', marginTop: 10, fontSize: 12, color: isDarkMode ? colours.dark.subText : colours.light.subText }}>\r\n        <div style={{ display: 'flex', alignItems: 'center', gap: 6 }}>\r\n          <Icon iconName=\"Forward\" style={{ fontSize: 14, color: isDarkMode ? '#cbd5e1' : '#64748b' }} />\r\n          <span>Direct call</span>\r\n        </div>\r\n        <div style={{ display: 'flex', alignItems: 'center', gap: 6 }}>\r\n          <Icon iconName=\"Flow\" style={{ fontSize: 14, color: isDarkMode ? '#cbd5e1' : '#64748b' }} />\r\n          <span>Proxy → Functions</span>\r\n        </div>\r\n        <div style={{ display: 'flex', alignItems: 'center', gap: 6 }}>\r\n          <Icon iconName=\"Shield\" style={{ fontSize: 14, color: isDarkMode ? '#cbd5e1' : '#64748b' }} />\r\n          <span>Secrets (Key Vault)</span>\r\n        </div>\r\n        <div style={{ display: 'flex', alignItems: 'center', gap: 6 }}>\r\n          <Icon iconName=\"Cloud\" style={{ fontSize: 14, color: isDarkMode ? '#cbd5e1' : '#64748b' }} />\r\n          <span>Storage</span>\r\n        </div>\r\n        <div style={{ display: 'flex', alignItems: 'center', gap: 6 }}>\r\n          <Icon iconName=\"Mail\" style={{ fontSize: 14, color: isDarkMode ? '#cbd5e1' : '#64748b' }} />\r\n          <span>Email (Graph)</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DataFlowDiagram;\r\n"],"names":["DataFlowDiagram","isDarkMode","useTheme","laneOrder","laneGap","laneHeight","nodeW","nodeH","containerRef","useRef","containerWidth","setContainerWidth","useState","useEffect","el","current","ro","ResizeObserver","entries","entry","w","contentRect","width","Math","abs","observe","disconnect","nodes","id","label","lane","x","y","laneColor","border","textColor","colours","dark","text","light","columns","useMemo","maxCols","length","usable","max","containerPadding","cols","floor","targetLaneWidth","min","laneColsRows","rows","ceil","laneWidth","totalGaps","maxRowsPerLane","map","n","_map$n$lane","Object","values","lanePos","laneIndex","col","row","nodePos","idx","indexOf","svgWidth","svgHeight","nodeMap","Map","_jsxs","ref","style","borderRadius","padding","background","boxShadow","children","height","viewBox","preserveAspectRatio","role","_jsx","markerWidth","markerHeight","refX","refY","orient","markerUnits","d","fill","i","lp","rx","ry","textAnchor","fontSize","from","to","e","arrow","fromId","toId","get","p1","p2","startX","startY","endX","endY","dx","path","strokeDasharray","undefined","stroke","strokeWidth","markerEnd","p","gradId","c1","c2","x1","y1","x2","y2","offset","stopColor","display","flexWrap","gap","alignItems","marginTop","color","subText","Icon","iconName"],"sourceRoot":""}