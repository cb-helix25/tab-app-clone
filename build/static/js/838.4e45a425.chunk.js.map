{"version":3,"file":"static/js/838.4e45a425.chunk.js","mappings":"4NASA,MA0KA,EA1KsCA,KACpC,MAAM,WAAEC,IAAeC,EAAAA,EAAAA,OAChBC,EAAOC,IAAYC,EAAAA,EAAAA,UAAiB,KACpCC,EAASC,IAAcF,EAAAA,EAAAA,UAAiB,KACxCG,EAAcC,IAAmBJ,EAAAA,EAAAA,WAAkB,GAkH1D,OACEK,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CACHC,QAAQ,QACRC,MAAO,CACLC,aAAc,OACdC,MAAOhB,EAAaiB,EAAAA,EAAQC,KAAKC,KAAOF,EAAAA,EAAQG,MAAMD,MACtDT,SACH,uBAGDC,EAAAA,EAAAA,KAACU,EAAAA,GAAW,CACVC,OAtDqC,CACzC,CACEC,MAAO,QACPC,KAAM,QACNC,KAAM,SACNC,UAAU,EACVC,YAAa,cACbC,KAAM,EACNC,IAAK,GAEP,CACEN,MAAO,UACPC,KAAM,UACNC,KAAM,SACNC,UAAU,EACVC,YAAa,gBACbC,KAAM,EACNC,IAAK,EACLC,IAAK,IAEP,CACEP,MAAO,mBACPC,KAAM,mBACNC,KAAM,OACNC,UAAU,EACVC,YAAa,0BAEf,CACEJ,MAAO,OACPC,KAAM,OACNC,KAAM,OACNC,UAAU,GAEZ,CACEH,MAAO,cACPC,KAAM,cACNC,KAAM,WACNC,UAAU,EACVC,YAAa,sBAiBXI,SA7HeC,UACnB7B,EAAS,IACTG,EAAW,IACXE,GAAgB,GAEhB,MAAMyB,EAAQC,SAASC,EAAc,MAAa,KAAO,EACnDC,EAAUF,SAASC,EAAgB,QAAa,KAAO,EACvDE,EAAmBF,EAAO,oBAA+BG,OACzDC,EAAOJ,EAAa,KACpBK,EAAeL,EAAoB,YAAaG,OAEtD,IAAKL,IAAUG,EAGb,OAFAjC,EAAS,mCACTK,GAAgB,GAIlB,GAAIiC,MAAMR,IAAUA,EAAQ,GAAKQ,MAAML,IAAYA,EAAU,GAAKA,GAAW,GAG3E,OAFAjC,EAAS,8CACTK,GAAgB,GAIlB,IAAK6B,EAGH,OAFAlC,EAAS,sCACTK,GAAgB,GAIlB,IAAK+B,EAGH,OAFApC,EAAS,0BACTK,GAAgB,GAIlB,IAAKgC,EAGH,OAFArC,EAAS,iCACTK,GAAgB,GAIlB,IAaE,WAZuBkC,MAAM,6CAA8C,CACzEC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CACnBd,QACAG,UACAC,kBACAE,OACAC,mBAIUQ,GACZ,MAAM,IAAIC,MAAM,kDAGlB3C,EAAW,mCACb,CAAE,MAAO4C,GACP/C,EAAS+C,EAAIC,SAAW,gCAC1B,CAAC,QACC3C,GAAgB,EAClB,GA+DI4C,SA5DeC,OA6Df9C,aAAcA,EACd+C,QAAS,KAEVpD,IACCS,EAAAA,EAAAA,KAAC4C,EAAAA,EAAU,CACTC,eAAgBC,EAAAA,EAAevD,MAC/BwD,aAAa,EACbC,OAAQ,CACNC,KAAM,CACJC,UAAW,OACXC,gBAAiB7C,EAAAA,EAAQ8C,IACzB/C,MAAO,YAETN,SAEDR,IAGJG,IACCM,EAAAA,EAAAA,KAAC4C,EAAAA,EAAU,CACTC,eAAgBC,EAAAA,EAAepD,QAC/BqD,aAAa,EACbC,OAAQ,CACNC,KAAM,CACJC,UAAW,OACXC,gBAAiB7C,EAAAA,EAAQ+C,MACzBhD,MAAO,YAETN,SAEDL,O","sources":["CustomForms/CreateTimeEntryForm.tsx"],"sourcesContent":["// src/CustomForms/CreateTimeEntryForm.tsx\r\n// invisible change\r\n\r\nimport React, { useState } from 'react';\r\nimport { Text, MessageBar, MessageBarType } from '@fluentui/react';\r\nimport { useTheme } from '../app/functionality/ThemeContext';\r\nimport { colours } from '../app/styles/colours';\r\nimport BespokeForm, { BespokeFormProps } from './BespokeForms'; // Ensure correct import\r\n\r\nconst CreateTimeEntryForm: React.FC = () => {\r\n  const { isDarkMode } = useTheme();\r\n  const [error, setError] = useState<string>('');\r\n  const [success, setSuccess] = useState<string>('');\r\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\r\n\r\n  const handleSubmit = async (values: { [key: string]: string | number | boolean | File }) => {\r\n    setError('');\r\n    setSuccess('');\r\n    setIsSubmitting(true);\r\n\r\n    const hours = parseInt(values['Hours'] as string, 10) || 0;\r\n    const minutes = parseInt(values['Minutes'] as string, 10) || 0;\r\n    const matterReference = (values['Matter Reference'] as string).trim();\r\n    const date = values['Date'] as string;\r\n    const description = (values['Description'] as string).trim();\r\n\r\n    if (!hours && !minutes) {\r\n      setError('Please enter the duration.');\r\n      setIsSubmitting(false);\r\n      return;\r\n    }\r\n\r\n    if (isNaN(hours) || hours < 0 || isNaN(minutes) || minutes < 0 || minutes >= 60) {\r\n      setError('Please enter valid hours and minutes.');\r\n      setIsSubmitting(false);\r\n      return;\r\n    }\r\n\r\n    if (!matterReference) {\r\n      setError('Matter Reference is required.');\r\n      setIsSubmitting(false);\r\n      return;\r\n    }\r\n\r\n    if (!date) {\r\n      setError('Date is required.');\r\n      setIsSubmitting(false);\r\n      return;\r\n    }\r\n\r\n    if (!description) {\r\n      setError('Description is required.');\r\n      setIsSubmitting(false);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await fetch('https://your-api-endpoint.com/time-entries', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n          hours,\r\n          minutes,\r\n          matterReference,\r\n          date,\r\n          description,\r\n        }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to create time entry. Please try again.');\r\n      }\r\n\r\n      setSuccess('Time entry created successfully!');\r\n    } catch (err: any) {\r\n      setError(err.message || 'An unexpected error occurred.');\r\n    } finally {\r\n      setIsSubmitting(false);\r\n    }\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    // Handle form cancellation\r\n  };\r\n\r\n  const fields: BespokeFormProps['fields'] = [\r\n    {\r\n      label: 'Hours',\r\n      name: 'Hours',\r\n      type: 'number',\r\n      required: true,\r\n      placeholder: 'Enter hours',\r\n      step: 1,\r\n      min: 0,\r\n    },\r\n    {\r\n      label: 'Minutes',\r\n      name: 'Minutes',\r\n      type: 'number',\r\n      required: true,\r\n      placeholder: 'Enter minutes',\r\n      step: 1,\r\n      min: 0,\r\n      max: 59,\r\n    },\r\n    {\r\n      label: 'Matter Reference',\r\n      name: 'Matter Reference',\r\n      type: 'text',\r\n      required: true,\r\n      placeholder: 'Enter Matter Reference',\r\n    },\r\n    {\r\n      label: 'Date',\r\n      name: 'Date',\r\n      type: 'text',\r\n      required: true,\r\n    },\r\n    {\r\n      label: 'Description',\r\n      name: 'Description',\r\n      type: 'textarea',\r\n      required: true,\r\n      placeholder: 'Enter Description',\r\n    },\r\n  ];\r\n  \r\n  return (\r\n    <div>\r\n      <Text\r\n        variant=\"large\"\r\n        style={{\r\n          marginBottom: '20px',\r\n          color: isDarkMode ? colours.dark.text : colours.light.text,\r\n        }}\r\n      >\r\n        Create Time Entry\r\n      </Text>\r\n      <BespokeForm\r\n        fields={fields}\r\n        onSubmit={handleSubmit}\r\n        onCancel={handleCancel}\r\n        isSubmitting={isSubmitting}\r\n        matters={[]}\r\n      />\r\n      {error && (\r\n        <MessageBar\r\n          messageBarType={MessageBarType.error}\r\n          isMultiline={false}\r\n          styles={{\r\n            root: {\r\n              marginTop: '10px',\r\n              backgroundColor: colours.cta,\r\n              color: '#ffffff',\r\n            },\r\n          }}\r\n        >\r\n          {error}\r\n        </MessageBar>\r\n      )}\r\n      {success && (\r\n        <MessageBar\r\n          messageBarType={MessageBarType.success}\r\n          isMultiline={false}\r\n          styles={{\r\n            root: {\r\n              marginTop: '10px',\r\n              backgroundColor: colours.green,\r\n              color: '#ffffff',\r\n            },\r\n          }}\r\n        >\r\n          {success}\r\n        </MessageBar>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreateTimeEntryForm;\r\n"],"names":["CreateTimeEntryForm","isDarkMode","useTheme","error","setError","useState","success","setSuccess","isSubmitting","setIsSubmitting","_jsxs","children","_jsx","Text","variant","style","marginBottom","color","colours","dark","text","light","BespokeForm","fields","label","name","type","required","placeholder","step","min","max","onSubmit","async","hours","parseInt","values","minutes","matterReference","trim","date","description","isNaN","fetch","method","headers","body","JSON","stringify","ok","Error","err","message","onCancel","handleCancel","matters","MessageBar","messageBarType","MessageBarType","isMultiline","styles","root","marginTop","backgroundColor","cta","green"],"sourceRoot":""}