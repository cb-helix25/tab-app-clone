{"version":3,"file":"static/js/470.b67ac12d.chunk.js","mappings":"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","sources":["../node_modules/@fluentui/react/lib/components/src/components/Link/useLink.ts","../node_modules/@fluentui/react/lib/components/src/components/Link/Link.base.tsx","../node_modules/@fluentui/react/lib/components/src/components/Link/Link.tsx","../node_modules/@fluentui/react/lib/components/src/components/Tooltip/Tooltip.types.ts","../node_modules/@fluentui/react/lib/components/src/components/Tooltip/Tooltip.base.tsx","../node_modules/@fluentui/react/lib/components/src/components/Tooltip/Tooltip.tsx","../node_modules/@fluentui/react/lib/components/src/components/Tooltip/Tooltip.styles.ts","../node_modules/@fluentui/react/lib/components/src/components/Tooltip/TooltipHost.base.tsx","../node_modules/@fluentui/utilities/src/overflow.ts","../node_modules/@fluentui/react/lib/components/src/components/Tooltip/TooltipHost.styles.ts","../node_modules/@fluentui/react/lib/components/src/components/Tooltip/TooltipHost.ts","../node_modules/@fluentui/react/lib/components/src/components/Tooltip/TooltipHost.types.ts","../node_modules/@fluentui/react/lib/components/src/components/Separator/Separator.base.tsx","../node_modules/@fluentui/react/lib/components/src/components/Separator/Separator.tsx","../node_modules/@fluentui/react/lib/components/src/components/Separator/Separator.styles.ts","../node_modules/@fluentui/react/lib/components/src/components/Link/Link.styles.ts"],"sourcesContent":["import * as React from 'react';\nimport { useMergedRefs } from '@fluentui/react-hooks';\nimport { classNamesFunction, useFocusRects } from '@fluentui/utilities';\nimport type { ILink, ILinkProps, ILinkStyleProps, ILinkStyles } from './Link.types';\n\nconst getClassNames = classNamesFunction<ILinkStyleProps, ILinkStyles>();\n\n/**\n * The useLink hook processes the Link component props and returns\n * state, slots and slotProps for consumption by the component.\n */\nexport const useLink = (props: ILinkProps, forwardedRef: React.Ref<HTMLElement>): any => {\n  const { as, className, disabled, href, onClick, styles, theme, underline } = props;\n  const rootRef = React.useRef<HTMLDivElement | null>(null);\n  const mergedRootRefs: React.Ref<HTMLElement> = useMergedRefs(rootRef, forwardedRef);\n\n  useComponentRef(props, rootRef);\n  useFocusRects(rootRef);\n\n  const classNames = getClassNames(styles!, {\n    className,\n    isButton: !href,\n    isDisabled: disabled,\n    isUnderlined: underline,\n    theme: theme!,\n  });\n\n  const _onClick = (ev: React.MouseEvent<HTMLAnchorElement | HTMLButtonElement>) => {\n    if (disabled) {\n      ev.preventDefault();\n    } else if (onClick) {\n      onClick(ev);\n    }\n  };\n\n  const rootType = as ? as : href ? 'a' : 'button';\n\n  const state = {};\n  const slots = { root: rootType };\n  const slotProps = {\n    root: {\n      ...adjustPropsForRootType(rootType, props),\n      'aria-disabled': disabled,\n      className: classNames.root,\n      onClick: _onClick,\n      ref: mergedRootRefs,\n    },\n  };\n\n  return { state, slots, slotProps };\n};\n\nconst useComponentRef = (props: ILinkProps, link: React.RefObject<ILink>) => {\n  React.useImperativeHandle(\n    props.componentRef,\n    () => ({\n      focus() {\n        if (link.current) {\n          link.current.focus();\n        }\n      },\n    }),\n    [link],\n  );\n};\n\nconst adjustPropsForRootType = (\n  RootType: string | React.ComponentClass | React.FunctionComponent,\n  props: ILinkProps & { getStyles?: any },\n): Partial<ILinkProps> => {\n  // Deconstruct the props so we remove props like `as`, `theme` and `styles`\n  // as those will always be removed. We also take some props that are optional\n  // based on the RootType.\n  const { as, disabled, target, href, theme, getStyles, styles, componentRef, underline, ...restProps } = props;\n\n  // RootType will be a string if we're dealing with an html component\n  if (typeof RootType === 'string') {\n    // Remove the disabled prop for anchor elements\n    if (RootType === 'a') {\n      return {\n        target,\n        href: disabled ? undefined : href,\n        ...restProps,\n      };\n    }\n\n    // Add the type='button' prop for button elements\n    if (RootType === 'button') {\n      return {\n        type: 'button',\n        disabled,\n        ...restProps,\n      };\n    }\n\n    // Remove the target and href props for all other non anchor elements\n    return { ...restProps, disabled };\n  }\n\n  // Retain all props except 'as' for ReactComponents\n  return { target, href, disabled, ...restProps };\n};\n","import * as React from 'react';\nimport { useLink } from './useLink';\nimport type { ILinkProps } from './Link.types';\n\nexport const LinkBase: React.FunctionComponent<ILinkProps> = React.forwardRef<HTMLElement, ILinkProps>((props, ref) => {\n  const { slots, slotProps } = useLink(props, ref);\n\n  return <slots.root {...slotProps.root} />;\n});\n\nLinkBase.displayName = 'LinkBase';\n","import * as React from 'react';\nimport { styled } from '@fluentui/utilities';\nimport { LinkBase } from './Link.base';\nimport { getStyles } from './Link.styles';\nimport type { ILinkProps, ILinkStyleProps, ILinkStyles } from './Link.types';\n\nexport const Link: React.FunctionComponent<ILinkProps> = styled<ILinkProps, ILinkStyleProps, ILinkStyles>(\n  LinkBase,\n  getStyles,\n  undefined,\n  {\n    scope: 'Link',\n  },\n);\n","import * as React from 'react';\nimport { TooltipBase } from './Tooltip.base';\nimport { DirectionalHint } from '../../common/DirectionalHint';\nimport type { ICalloutProps } from '../../Callout';\nimport type { IRenderFunction, IRefObject, IStyleFunctionOrObject } from '../../Utilities';\nimport type { IStyle, ITheme } from '../../Styling';\n\n/**\n * {@docCategory Tooltip}\n */\nexport interface ITooltip {}\n\n/**\n * {@docCategory Tooltip}\n */\nexport interface ITooltipProps extends Omit<React.HTMLAttributes<HTMLDivElement | TooltipBase>, 'content'> {\n  /**\n   * Optional callback to access the ITooltip interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: IRefObject<ITooltip>;\n\n  /**\n   * Properties to pass through for Callout.\n   * @defaultvalue `{ isBeakVisible: true, beakWidth: 16, gapSpace: 0, setInitialFocus: true, doNotLayer: false }`\n   */\n  calloutProps?: ICalloutProps;\n\n  /**\n   * Content to be passed to the tooltip\n   */\n  // eslint-disable-next-line @typescript-eslint/no-deprecated\n  content?: string | JSX.Element | JSX.Element[];\n\n  /**\n   * Render function to populate tooltip content.\n   */\n  onRenderContent?: IRenderFunction<ITooltipProps>;\n\n  /**\n   * Length of delay. Set to `TooltipDelay.zero` if you do not want a delay.\n   * @defaultvalue TooltipDelay.medium\n   */\n  delay?: TooltipDelay;\n\n  /**\n   * Max width of tooltip\n   * @defaultvalue 364px\n   */\n  maxWidth?: string | null;\n\n  /**\n   * Element to anchor the Tooltip to.\n   */\n  targetElement?: HTMLElement;\n\n  /**\n   * How the tooltip should be anchored to its `targetElement`.\n   * @defaultvalue DirectionalHint.topCenter\n   */\n  directionalHint?: DirectionalHint;\n\n  /**\n   * How the element should be positioned in RTL layouts.\n   * If not specified, a mirror of `directionalHint` will be used instead\n   */\n  directionalHintForRTL?: DirectionalHint;\n\n  /**\n   * Theme provided by higher-order component.\n   */\n  theme?: ITheme;\n\n  /**\n   * Call to provide customized styling that will layer on top of the variant rules.\n   */\n  styles?: IStyleFunctionOrObject<ITooltipStyleProps, ITooltipStyles>;\n}\n\n/**\n * {@docCategory Tooltip}\n */\nexport enum TooltipDelay {\n  zero = 0,\n  /** 300 ms delay before showing the tooltip */\n  medium = 1,\n  /** 500 ms delay before showing the tooltip */\n  long = 2,\n}\n\n/**\n * {@docCategory Tooltip}\n */\nexport interface ITooltipStyleProps {\n  theme: ITheme;\n\n  className?: string;\n\n  /**\n   * Delay before tooltip appears.\n   * @deprecated Delay logic moved to TooltipHost vs relying on animation delay.\n   */\n  delay?: TooltipDelay;\n\n  /**\n   * Maximum width of tooltip.\n   */\n  maxWidth?: string;\n\n  /**\n   * The gap between the Callout and the target\n   * @defaultvalue 0\n   */\n  gapSpace?: number;\n\n  /**\n   * The width of the Callout's beak\n   * @defaultvalue 16\n   */\n  beakWidth?: number;\n}\n\n/**\n * {@docCategory Tooltip}\n */\nexport interface ITooltipStyles {\n  /**\n   * Style for the root element.\n   */\n  root: IStyle;\n\n  /**\n   * Style for the content element.\n   */\n  content: IStyle;\n\n  /**\n   * Style for the subtext element.\n   */\n  subText: IStyle;\n}\n","import * as React from 'react';\nimport { classNamesFunction, divProperties, getNativeProps } from '../../Utilities';\nimport { Callout } from '../../Callout';\nimport { DirectionalHint } from '../../common/DirectionalHint';\nimport type { IProcessedStyleSet } from '../../Styling';\nimport type { ITooltipProps, ITooltipStyleProps, ITooltipStyles } from './Tooltip.types';\n\nconst getClassNames = classNamesFunction<ITooltipStyleProps, ITooltipStyles>();\n\nexport class TooltipBase extends React.Component<ITooltipProps, any> {\n  // Specify default props values\n  public static defaultProps: Partial<ITooltipProps> = {\n    directionalHint: DirectionalHint.topCenter,\n    maxWidth: '364px',\n    calloutProps: {\n      isBeakVisible: true,\n      beakWidth: 16,\n      gapSpace: 0,\n      setInitialFocus: true,\n      doNotLayer: false,\n    },\n  };\n\n  private _classNames: IProcessedStyleSet<ITooltipStyles>;\n\n  // eslint-disable-next-line @typescript-eslint/no-deprecated\n  public render(): JSX.Element {\n    const {\n      className,\n      calloutProps,\n      directionalHint,\n      directionalHintForRTL,\n      styles,\n      id,\n      maxWidth,\n      onRenderContent = this._onRenderContent,\n      targetElement,\n      theme,\n    } = this.props;\n\n    this._classNames = getClassNames(styles!, {\n      theme: theme!,\n      className: className || (calloutProps && calloutProps.className),\n      beakWidth: calloutProps && calloutProps.isBeakVisible ? calloutProps.beakWidth : 0,\n      gapSpace: calloutProps && calloutProps.gapSpace,\n      maxWidth: maxWidth!,\n    });\n\n    return (\n      <Callout\n        target={targetElement}\n        directionalHint={directionalHint}\n        directionalHintForRTL={directionalHintForRTL}\n        {...calloutProps}\n        {...getNativeProps(this.props, divProperties, ['id'])} // omitting ID due to it being used in the div below\n        className={this._classNames.root}\n      >\n        <div\n          className={this._classNames.content}\n          id={id}\n          onFocus={this.props.onFocus}\n          onMouseEnter={this.props.onMouseEnter}\n          onMouseLeave={this.props.onMouseLeave}\n        >\n          {onRenderContent(this.props, this._onRenderContent)}\n        </div>\n      </Callout>\n    );\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-deprecated\n  private _onRenderContent = (props: ITooltipProps): JSX.Element => {\n    if (typeof props.content === 'string') {\n      return <p className={this._classNames.subText}>{props.content}</p>;\n    } else {\n      return <div className={this._classNames.subText}>{props.content}</div>;\n    }\n  };\n}\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { TooltipBase } from './Tooltip.base';\nimport { getStyles } from './Tooltip.styles';\nimport type { ITooltipProps, ITooltipStyleProps, ITooltipStyles } from './Tooltip.types';\n\nexport const Tooltip: React.FunctionComponent<ITooltipProps> = styled<\n  ITooltipProps,\n  ITooltipStyleProps,\n  ITooltipStyles\n>(TooltipBase, getStyles, undefined, {\n  scope: 'Tooltip',\n});\n","import { AnimationClassNames } from '../../Styling';\nimport type { ITooltipStyleProps, ITooltipStyles } from './Tooltip.types';\n\nexport const getStyles = (props: ITooltipStyleProps): ITooltipStyles => {\n  const { className, beakWidth = 16, gapSpace = 0, maxWidth, theme } = props;\n  const { semanticColors, fonts, effects } = theme;\n\n  // The math here is done to account for the 45 degree rotation of the beak\n  // and sub-pixel rounding that differs across browsers, which is more noticeable when\n  // the device pixel ratio is larger\n  const tooltipGapSpace =\n    -(Math.sqrt((beakWidth * beakWidth) / 2) + gapSpace) +\n    1 /\n      // There isn't really a great way to pass in a `window` reference here so disabling the line rule\n      // eslint-disable-next-line no-restricted-globals\n      window.devicePixelRatio;\n\n  return {\n    root: [\n      'ms-Tooltip',\n      theme.fonts.medium,\n      AnimationClassNames.fadeIn200,\n      {\n        background: semanticColors.menuBackground,\n        boxShadow: effects.elevation8,\n        padding: '8px',\n        maxWidth,\n        selectors: {\n          ':after': {\n            content: `''`,\n            position: 'absolute',\n            bottom: tooltipGapSpace,\n            left: tooltipGapSpace,\n            right: tooltipGapSpace,\n            top: tooltipGapSpace,\n            zIndex: 0,\n          },\n        },\n      },\n      className,\n    ],\n    content: [\n      'ms-Tooltip-content',\n      fonts.small,\n      {\n        position: 'relative',\n        zIndex: 1,\n        color: semanticColors.menuItemText,\n        wordWrap: 'break-word',\n        overflowWrap: 'break-word',\n        overflow: 'hidden',\n      },\n    ],\n    subText: [\n      'ms-Tooltip-subtext',\n      {\n        // Using inherit here to avoid unintentional global overrides of the <p> tag.\n        fontSize: 'inherit',\n        fontWeight: 'inherit',\n        color: 'inherit',\n        margin: 0,\n      },\n    ],\n  };\n};\n","import * as React from 'react';\nimport { hiddenContentStyle } from '../../Styling';\nimport {\n  initializeComponentRef,\n  Async,\n  divProperties,\n  getNativeProps,\n  getId,\n  assign,\n  hasOverflow,\n  portalContainsElement,\n  classNamesFunction,\n  KeyCodes,\n} from '../../Utilities';\nimport { TooltipOverflowMode } from './TooltipHost.types';\nimport { Tooltip } from './Tooltip';\nimport { TooltipDelay } from './Tooltip.types';\nimport type { ITooltipHostProps, ITooltipHostStyles, ITooltipHostStyleProps, ITooltipHost } from './TooltipHost.types';\nimport { WindowContext } from '@fluentui/react-window-provider';\nimport { getDocumentEx } from '../../utilities/dom';\n\nexport interface ITooltipHostState {\n  /** @deprecated No longer used internally */\n  isAriaPlaceholderRendered: boolean;\n  isTooltipVisible: boolean;\n}\n\nconst getClassNames = classNamesFunction<ITooltipHostStyleProps, ITooltipHostStyles>();\n\nexport class TooltipHostBase extends React.Component<ITooltipHostProps, ITooltipHostState> implements ITooltipHost {\n  public static defaultProps = {\n    delay: TooltipDelay.medium,\n  };\n  public static contextType = WindowContext;\n  private static _currentVisibleTooltip: ITooltipHost | undefined;\n\n  public context: any;\n\n  // The wrapping div that gets the hover events\n  private _tooltipHost = React.createRef<HTMLDivElement>();\n\n  private _classNames: { [key in keyof ITooltipHostStyles]: string };\n  private _async: Async;\n  private _dismissTimerId: number;\n  private _openTimerId: number;\n  private _defaultTooltipId = getId('tooltip');\n  private _ignoreNextFocusEvent: boolean;\n\n  // Constructor\n  constructor(props: ITooltipHostProps) {\n    super(props);\n\n    initializeComponentRef(this);\n\n    this.state = {\n      isAriaPlaceholderRendered: false,\n      isTooltipVisible: false,\n    };\n  }\n\n  // Render\n  // eslint-disable-next-line @typescript-eslint/no-deprecated\n  public render(): JSX.Element {\n    const {\n      calloutProps,\n      children,\n      content,\n      directionalHint,\n      directionalHintForRTL,\n      hostClassName: className,\n      id,\n      // eslint-disable-next-line @typescript-eslint/no-deprecated\n      setAriaDescribedBy = true,\n      tooltipProps,\n      styles,\n      theme,\n    } = this.props;\n\n    this._classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n    });\n\n    const { isTooltipVisible } = this.state;\n    const tooltipId = id || this._defaultTooltipId;\n\n    const tooltipRenderProps = {\n      id: `${tooltipId}--tooltip`,\n      content,\n      targetElement: this._getTargetElement(),\n      directionalHint,\n      directionalHintForRTL,\n      calloutProps: assign({}, calloutProps, {\n        onDismiss: this._hideTooltip,\n        onFocus: this._onTooltipContentFocus,\n        onMouseEnter: this._onTooltipMouseEnter,\n        onMouseLeave: this._onTooltipMouseLeave,\n      }),\n      onMouseEnter: this._onTooltipMouseEnter,\n      onMouseLeave: this._onTooltipMouseLeave,\n      ...getNativeProps(this.props, divProperties, ['id']), // Make sure we use the id above\n      ...tooltipProps,\n    };\n\n    // Get the content of the tooltip for use in the hidden div used for screen readers\n    const tooltipContent = tooltipProps?.onRenderContent\n      ? tooltipProps.onRenderContent(tooltipRenderProps, props => (props?.content ? <>{props.content}</> : null))\n      : content;\n    const showTooltip = isTooltipVisible && !!tooltipContent;\n    const ariaDescribedBy = setAriaDescribedBy && isTooltipVisible && !!tooltipContent ? tooltipId : undefined;\n\n    return (\n      <div\n        className={this._classNames.root}\n        ref={this._tooltipHost}\n        {...{ onFocusCapture: this._onTooltipFocus }}\n        {...{ onBlurCapture: this._onTooltipBlur }}\n        onMouseEnter={this._onTooltipMouseEnter}\n        onMouseLeave={this._onTooltipMouseLeave}\n        onKeyDown={this._onTooltipKeyDown}\n        role=\"none\"\n        // WARNING: aria-describedby on this node provides no value, since it isn't allowed generic elements\n        aria-describedby={ariaDescribedBy}\n      >\n        {children}\n        {showTooltip && <Tooltip {...tooltipRenderProps} />}\n        <div hidden={true} id={tooltipId} style={hiddenContentStyle as React.CSSProperties}>\n          {tooltipContent}\n        </div>\n      </div>\n    );\n  }\n\n  public componentDidMount(): void {\n    this._async = new Async(this);\n  }\n\n  public componentWillUnmount(): void {\n    if (TooltipHostBase._currentVisibleTooltip && TooltipHostBase._currentVisibleTooltip === this) {\n      TooltipHostBase._currentVisibleTooltip = undefined;\n    }\n\n    this._async.dispose();\n  }\n\n  public show = (): void => {\n    this._toggleTooltip(true);\n  };\n\n  public dismiss = (): void => {\n    this._hideTooltip();\n  };\n\n  private _getTargetElement = (): HTMLElement | undefined => {\n    if (!this._tooltipHost.current) {\n      return undefined;\n    }\n\n    const { overflowMode } = this.props;\n\n    // Select target element based on overflow mode. For parent mode, you want to position the tooltip relative\n    // to the parent element, otherwise it might look off.\n    if (overflowMode !== undefined) {\n      switch (overflowMode) {\n        case TooltipOverflowMode.Parent:\n          return this._tooltipHost.current.parentElement!;\n\n        case TooltipOverflowMode.Self:\n          return this._tooltipHost.current;\n      }\n    }\n\n    return this._tooltipHost.current;\n  };\n\n  private _onTooltipFocus = (ev: React.FocusEvent<HTMLElement>) => {\n    if (this._ignoreNextFocusEvent) {\n      this._ignoreNextFocusEvent = false;\n      return;\n    }\n\n    this._onTooltipMouseEnter(ev);\n  };\n\n  private _onTooltipContentFocus = (ev: React.FocusEvent<HTMLElement>) => {\n    if (TooltipHostBase._currentVisibleTooltip && TooltipHostBase._currentVisibleTooltip !== this) {\n      TooltipHostBase._currentVisibleTooltip.dismiss();\n    }\n    TooltipHostBase._currentVisibleTooltip = this;\n\n    this._clearDismissTimer();\n    this._clearOpenTimer();\n  };\n\n  private _onTooltipBlur = (ev: React.FocusEvent<HTMLElement>) => {\n    // The focused element gets a blur event when the document loses focus\n    // (e.g. switching tabs in the browser), but we don't want to show the\n    // tooltip again when the document gets focus back. Handle this case by\n    // checking if the blurred element is still the document's activeElement,\n    // and ignoring when it next gets focus back.\n    // See https://github.com/microsoft/fluentui/issues/13541\n    this._ignoreNextFocusEvent = getDocumentEx(this.context)?.activeElement === ev.target;\n\n    this._dismissTimerId = this._async.setTimeout(() => {\n      this._hideTooltip();\n    }, 0);\n  };\n\n  // Show Tooltip\n  private _onTooltipMouseEnter = (ev: any): void => {\n    const { overflowMode, delay } = this.props;\n    const doc = getDocumentEx(this.context);\n\n    if (TooltipHostBase._currentVisibleTooltip && TooltipHostBase._currentVisibleTooltip !== this) {\n      TooltipHostBase._currentVisibleTooltip.dismiss();\n    }\n    TooltipHostBase._currentVisibleTooltip = this;\n\n    if (overflowMode !== undefined) {\n      const overflowElement = this._getTargetElement();\n      if (overflowElement && !hasOverflow(overflowElement)) {\n        return;\n      }\n    }\n\n    if (ev.target && portalContainsElement(ev.target as HTMLElement, this._getTargetElement(), doc)) {\n      // Do not show tooltip when target is inside a portal relative to TooltipHost.\n      return;\n    }\n\n    this._clearDismissTimer();\n    this._clearOpenTimer();\n\n    if (delay !== TooltipDelay.zero) {\n      const delayTime = this._getDelayTime(delay!); // non-null assertion because we set it in `defaultProps`\n\n      this._openTimerId = this._async.setTimeout(() => {\n        this._toggleTooltip(true);\n      }, delayTime);\n    } else {\n      this._toggleTooltip(true);\n    }\n  };\n\n  // Hide Tooltip\n  private _onTooltipMouseLeave = (ev: any): void => {\n    const { closeDelay } = this.props;\n\n    this._clearDismissTimer();\n    this._clearOpenTimer();\n\n    if (closeDelay) {\n      this._dismissTimerId = this._async.setTimeout(() => {\n        this._toggleTooltip(false);\n      }, closeDelay);\n    } else {\n      this._toggleTooltip(false);\n    }\n\n    if (TooltipHostBase._currentVisibleTooltip === this) {\n      TooltipHostBase._currentVisibleTooltip = undefined;\n    }\n  };\n\n  private _onTooltipKeyDown = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    // eslint-disable-next-line @typescript-eslint/no-deprecated\n    if ((ev.which === KeyCodes.escape || ev.ctrlKey) && this.state.isTooltipVisible) {\n      this._hideTooltip();\n      ev.stopPropagation();\n    }\n  };\n\n  private _clearDismissTimer = (): void => {\n    this._async.clearTimeout(this._dismissTimerId);\n  };\n\n  private _clearOpenTimer = (): void => {\n    this._async.clearTimeout(this._openTimerId);\n  };\n\n  // Hide Tooltip\n  private _hideTooltip = (): void => {\n    this._clearOpenTimer();\n    this._clearDismissTimer();\n    this._toggleTooltip(false);\n  };\n\n  private _toggleTooltip = (isTooltipVisible: boolean): void => {\n    if (this.state.isTooltipVisible !== isTooltipVisible) {\n      this.setState(\n        { isTooltipVisible },\n        () => this.props.onTooltipToggle && this.props.onTooltipToggle(isTooltipVisible),\n      );\n    }\n  };\n\n  private _getDelayTime = (delay: TooltipDelay): number => {\n    switch (delay) {\n      case TooltipDelay.medium:\n        return 300;\n      case TooltipDelay.long:\n        return 500;\n      default:\n        return 0;\n    }\n  };\n}\n","/**\n * Detects whether an element's content has horizontal overflow\n *\n * @public\n * @param element - Element to check for overflow\n * @returns True if element's content overflows\n */\nexport function hasHorizontalOverflow(element: HTMLElement): boolean {\n  return element.clientWidth < element.scrollWidth;\n}\n\n/**\n * Detects whether an element's content has vertical overflow\n *\n * @public\n * @param element - Element to check for overflow\n * @returns True if element's content overflows\n */\nexport function hasVerticalOverflow(element: HTMLElement): boolean {\n  return element.clientHeight < element.scrollHeight;\n}\n\n/**\n * Detects whether an element's content has overflow in any direction\n *\n * @public\n * @param element - Element to check for overflow\n * @returns True if element's content overflows\n */\nexport function hasOverflow(element: HTMLElement): boolean {\n  return hasHorizontalOverflow(element) || hasVerticalOverflow(element);\n}\n","import { getGlobalClassNames } from '../../Styling';\nimport type { ITooltipHostStyleProps, ITooltipHostStyles } from './TooltipHost.types';\n\nconst GlobalClassNames = {\n  root: 'ms-TooltipHost',\n  ariaPlaceholder: 'ms-TooltipHost-aria-placeholder',\n};\n\nexport const getStyles = (props: ITooltipHostStyleProps): ITooltipHostStyles => {\n  const { className, theme } = props;\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  return {\n    root: [\n      classNames.root,\n      {\n        display: 'inline',\n      },\n      className,\n    ],\n  };\n};\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { TooltipHostBase } from './TooltipHost.base';\nimport { getStyles } from './TooltipHost.styles';\nimport type { ITooltipHostProps, ITooltipHostStyleProps, ITooltipHostStyles } from './TooltipHost.types';\n\nexport const TooltipHost: React.FunctionComponent<ITooltipHostProps> = styled<\n  ITooltipHostProps,\n  ITooltipHostStyleProps,\n  ITooltipHostStyles\n>(TooltipHostBase, getStyles, undefined, {\n  scope: 'TooltipHost',\n});\n","import * as React from 'react';\nimport { TooltipHostBase } from './TooltipHost.base';\nimport { TooltipDelay } from './Tooltip.types';\nimport { DirectionalHint } from '../../common/DirectionalHint';\nimport type { ITooltipProps } from './Tooltip.types';\nimport type { ICalloutProps } from '../../Callout';\nimport type { IRefObject, IStyleFunctionOrObject } from '../../Utilities';\nimport type { IStyle, ITheme } from '../../Styling';\n\n/**\n * {@docCategory Tooltip}\n */\nexport interface ITooltipHost {\n  /**\n   * Shows the tooltip.\n   */\n  show: () => void;\n\n  /**\n   * Dismisses the tooltip.\n   */\n  dismiss: () => void;\n}\n\n/**\n * {@docCategory Tooltip}\n */\nexport enum TooltipOverflowMode {\n  /** Only show tooltip if parent DOM element is overflowing */\n  Parent,\n\n  /**\n   * Only show tooltip if tooltip host's content is overflowing.\n   * Note that this does not check the children for overflow, only the TooltipHost root.\n   */\n  Self,\n}\n\n/**\n * TooltipHost props. Note that native props (such as `id`, `className`, and `aria-` props) are\n * passed through to the Tooltip itself, rather than being used on the host element.\n * {@docCategory Tooltip}\n */\nexport interface ITooltipHostProps extends Omit<React.HTMLAttributes<HTMLDivElement | TooltipHostBase>, 'content'> {\n  /**\n   * Optional callback to access the ITooltipHost interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: IRefObject<ITooltipHost>;\n\n  /**\n   * Additional properties to pass through for Callout.\n   */\n  calloutProps?: ICalloutProps;\n\n  /**\n   * Number of milliseconds to delay closing the tooltip, so that the user has time to hover over\n   * the tooltip and interact with it. Hovering over the tooltip will count as hovering over the\n   * host, so that the tooltip will stay open if the user is actively interacting with it.\n   */\n  closeDelay?: number;\n\n  /**\n   * Content to display in the Tooltip.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-deprecated\n  content?: string | JSX.Element | JSX.Element[];\n\n  /**\n   * Length of delay before showing the tooltip on hover.\n   * @defaultvalue TooltipDelay.medium\n   */\n  delay?: TooltipDelay;\n\n  /**\n   * How the tooltip should be anchored to its `targetElement`.\n   * @defaultvalue DirectionalHint.topCenter\n   */\n  directionalHint?: DirectionalHint;\n\n  /**\n   * How the element should be positioned in RTL layouts.\n   * If not specified, a mirror of `directionalHint` will be used.\n   */\n  directionalHintForRTL?: DirectionalHint;\n\n  /**\n   * Class name to apply to tooltip host.\n   */\n  hostClassName?: string;\n\n  /**\n   * Class name to apply to the *tooltip itself*, not the host.\n   * To apply a class to the host, use `hostClassName` or `styles.root`.\n   */\n  className?: string;\n\n  /**\n   * If this is unset (the default), the tooltip is always shown even if there's no overflow.\n   *\n   * If set, only show the tooltip if the specified element (`Self` or `Parent`) has overflow.\n   * When set to `Parent`, the parent element is also used as the tooltip's target element.\n   *\n   * Note that even with `Self` mode, the TooltipHost *does not* check whether any children have overflow.\n   */\n  overflowMode?: TooltipOverflowMode;\n\n  /**\n   * Whether or not to mark the TooltipHost root element as described by the tooltip.\n   * Since this applies aria-describedby to a generic <div>, the description will not be\n   * read by screen readers. Instead, the caller should pass an `id` to the TooltipHost\n   * (to be passed through to the Tooltip) and mark the appropriate element as `aria-describedby`\n   * with the `id`.\n   * @defaultvalue true\n   * @deprecated use aria-describedby on the appropriate element instead\n   */\n  setAriaDescribedBy?: boolean;\n\n  /**\n   * Additional properties to pass through for Tooltip.\n   */\n  tooltipProps?: ITooltipProps;\n\n  /**\n   * Optional ID to pass through to the tooltip (not used on the host itself).\n   * Auto-generated if not provided.\n   */\n  id?: string;\n\n  /**\n   * Call to provide customized styling that will layer on top of the variant rules.\n   */\n  styles?: IStyleFunctionOrObject<ITooltipHostStyleProps, ITooltipHostStyles>;\n\n  /**\n   * Theme provided by higher-order component.\n   */\n  theme?: ITheme;\n\n  /**\n   * Notifies when tooltip becomes visible or hidden, whatever the trigger was.\n   */\n  onTooltipToggle?(isTooltipVisible: boolean): void;\n}\n\n/**\n * {@docCategory Tooltip}\n */\nexport interface ITooltipHostStyleProps {\n  theme: ITheme;\n  className?: string;\n}\n\n/**\n * {@docCategory Tooltip}\n */\nexport interface ITooltipHostStyles {\n  /**\n   * Style for the host wrapper element.\n   */\n  root: IStyle;\n}\n","import * as React from 'react';\nimport { classNamesFunction } from '../../Utilities';\nimport type { ISeparatorProps, ISeparatorStyles, ISeparatorStyleProps } from './Separator.types';\n\nconst getClassNames = classNamesFunction<ISeparatorStyleProps, ISeparatorStyles>();\n\nexport const SeparatorBase: React.FunctionComponent<ISeparatorProps> = React.forwardRef<\n  HTMLDivElement,\n  ISeparatorProps\n>((props, ref) => {\n  const { styles, theme, className, vertical, alignContent, children } = props;\n\n  const classNames = getClassNames(styles!, {\n    theme: theme!,\n    className,\n    alignContent,\n    vertical,\n  });\n\n  return (\n    <div className={classNames.root} ref={ref}>\n      <div className={classNames.content} role=\"separator\" aria-orientation={vertical ? 'vertical' : 'horizontal'}>\n        {children}\n      </div>\n    </div>\n  );\n});\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { getStyles } from './Separator.styles';\nimport { SeparatorBase } from './Separator.base';\nimport type { ISeparatorProps, ISeparatorStyleProps, ISeparatorStyles } from './Separator.types';\n\nexport const Separator: React.FunctionComponent<ISeparatorProps> = styled<\n  ISeparatorProps,\n  ISeparatorStyleProps,\n  ISeparatorStyles\n>(SeparatorBase, getStyles, undefined, {\n  scope: 'Separator',\n});\nSeparator.displayName = 'Separator';\n","import { HighContrastSelector } from '../../Styling';\nimport type { ISeparatorStyleProps, ISeparatorStyles } from './Separator.types';\n\nexport const getStyles = (props: ISeparatorStyleProps): ISeparatorStyles => {\n  const { theme, alignContent, vertical, className } = props;\n\n  const alignStart = alignContent === 'start';\n  const alignCenter = alignContent === 'center';\n  const alignEnd = alignContent === 'end';\n\n  return {\n    root: [\n      theme.fonts.medium,\n      {\n        position: 'relative',\n      },\n      alignContent && {\n        textAlign: alignContent,\n      },\n      !alignContent && {\n        textAlign: 'center',\n      },\n      vertical &&\n        (alignCenter || !alignContent) && {\n          verticalAlign: 'middle',\n        },\n      vertical &&\n        alignStart && {\n          verticalAlign: 'top',\n        },\n      vertical &&\n        alignEnd && {\n          verticalAlign: 'bottom',\n        },\n      vertical && {\n        padding: '0 4px',\n        height: 'inherit',\n        display: 'table-cell',\n        zIndex: 1,\n        selectors: {\n          ':after': {\n            backgroundColor: theme.palette.neutralLighter,\n            width: '1px',\n            content: '\"\"',\n            position: 'absolute',\n            top: '0',\n            bottom: '0',\n            left: '50%',\n            right: '0',\n            zIndex: -1,\n            [HighContrastSelector]: {\n              backgroundColor: 'WindowText',\n            },\n          },\n        },\n      },\n      !vertical && {\n        padding: '4px 0',\n        selectors: {\n          ':before': {\n            backgroundColor: theme.palette.neutralLighter,\n            height: '1px',\n            content: '\"\"',\n            display: 'block',\n            position: 'absolute',\n            top: '50%',\n            bottom: '0',\n            left: '0',\n            right: '0',\n            [HighContrastSelector]: {\n              backgroundColor: 'WindowText',\n            },\n          },\n        },\n      },\n      className,\n    ],\n    content: [\n      {\n        position: 'relative',\n        display: 'inline-block',\n        padding: '0 12px',\n        color: theme.semanticColors.bodyText,\n        background: theme.semanticColors.bodyBackground,\n      },\n      vertical && {\n        padding: '12px 0',\n      },\n    ],\n  };\n};\n","import { getGlobalClassNames, HighContrastSelector } from '@fluentui/style-utilities';\nimport type { ILinkStyleProps, ILinkStyles } from './Link.types';\nimport { IsFocusVisibleClassName } from '@fluentui/utilities';\n\nexport const GlobalClassNames = {\n  root: 'ms-Link',\n};\n\nexport const getStyles = (props: ILinkStyleProps): ILinkStyles => {\n  const { className, isButton, isDisabled, isUnderlined, theme } = props;\n  const { semanticColors } = theme;\n\n  // Tokens\n  const linkColor = semanticColors.link;\n  const linkInteractedColor = semanticColors.linkHovered;\n  const linkDisabledColor = semanticColors.disabledText;\n  const focusBorderColor = semanticColors.focusBorder;\n\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  return {\n    root: [\n      classNames.root,\n      theme.fonts.medium,\n      {\n        color: linkColor,\n        outline: 'none',\n        fontSize: 'inherit',\n        fontWeight: 'inherit',\n        textDecoration: isUnderlined ? 'underline' : 'none',\n\n        selectors: {\n          [`.${IsFocusVisibleClassName} &:focus, :host(.${IsFocusVisibleClassName}) &:focus`]: {\n            // Can't use getFocusStyle because it doesn't support wrapping links\n            // https://github.com/microsoft/fluentui/issues/4883#issuecomment-406743543\n            // Using box-shadow and outline allows the focus rect to wrap links that span multiple lines\n            // and helps the focus rect avoid getting clipped.\n            boxShadow: `0 0 0 1px ${focusBorderColor} inset`,\n            outline: `1px auto ${focusBorderColor}`,\n            selectors: {\n              [HighContrastSelector]: {\n                outline: '1px solid WindowText',\n              },\n            },\n          },\n          [HighContrastSelector]: {\n            // For IE high contrast mode\n            borderBottom: 'none',\n          },\n        },\n      },\n      isButton && {\n        background: 'none',\n        backgroundColor: 'transparent',\n        border: 'none',\n        cursor: 'pointer',\n        display: 'inline',\n        margin: 0,\n        overflow: 'inherit',\n        padding: 0,\n        textAlign: 'left',\n        textOverflow: 'inherit',\n        userSelect: 'text',\n        borderBottom: '1px solid transparent', // For Firefox high contrast mode\n        selectors: {\n          [HighContrastSelector]: {\n            color: 'LinkText',\n            forcedColorAdjust: 'none',\n          },\n        },\n      },\n      !isButton && {\n        selectors: {\n          [HighContrastSelector]: {\n            // This is mainly for MessageBar, which sets MsHighContrastAdjust: none by default\n            MsHighContrastAdjust: 'auto',\n            forcedColorAdjust: 'auto',\n          },\n        },\n      },\n\n      isDisabled && [\n        'is-disabled',\n        {\n          color: linkDisabledColor,\n          cursor: 'default',\n        },\n        {\n          selectors: {\n            '&:link, &:visited': {\n              pointerEvents: 'none',\n            },\n\n            [HighContrastSelector]: {\n              // We need to specify the color in High Contrast because of the case of Links rendering as buttons.\n              color: 'GrayText',\n            },\n          },\n        },\n      ],\n      !isDisabled && {\n        selectors: {\n          '&:active, &:hover, &:active:hover': {\n            color: linkInteractedColor,\n            textDecoration: 'underline',\n\n            selectors: {\n              [HighContrastSelector]: {\n                color: 'LinkText',\n              },\n            },\n          },\n          '&:focus': {\n            color: linkColor,\n\n            selectors: {\n              [HighContrastSelector]: {\n                color: 'LinkText',\n              },\n            },\n          },\n        },\n      },\n      classNames.root,\n      className,\n    ],\n  };\n};\n"],"names":["getClassNames","classNamesFunction","useComponentRef","props","link","React","componentRef","focus","current","adjustPropsForRootType","RootType","as","disabled","target","href","restProps","theme","getStyles","styles","underline","__rest","__assign","undefined","type","LinkBase","ref","_a","forwardedRef","className","onClick","rootRef","mergedRootRefs","useMergedRefs","useFocusRects","classNames","isButton","isDisabled","isUnderlined","rootType","state","slots","root","slotProps","ev","preventDefault","useLink","displayName","Link","styled","scope","TooltipDelay","TooltipBase","_super","_this","_onRenderContent","content","_classNames","subText","__extends","prototype","render","this","calloutProps","directionalHint","directionalHintForRTL","id","maxWidth","_b","onRenderContent","targetElement","beakWidth","isBeakVisible","gapSpace","Callout","getNativeProps","divProperties","onFocus","onMouseEnter","onMouseLeave","defaultProps","DirectionalHint","topCenter","setInitialFocus","doNotLayer","Tooltip","semanticColors","fonts","effects","tooltipGapSpace","Math","sqrt","window","devicePixelRatio","medium","AnimationClassNames","fadeIn200","background","menuBackground","boxShadow","elevation8","padding","selectors","position","bottom","left","right","top","zIndex","small","color","menuItemText","wordWrap","overflowWrap","overflow","fontSize","fontWeight","margin","TooltipHostBase","call","_tooltipHost","_defaultTooltipId","getId","show","_toggleTooltip","dismiss","_hideTooltip","_getTargetElement","overflowMode","TooltipOverflowMode","Parent","parentElement","Self","_onTooltipFocus","_ignoreNextFocusEvent","_onTooltipMouseEnter","_onTooltipContentFocus","_currentVisibleTooltip","_clearDismissTimer","_clearOpenTimer","_onTooltipBlur","getDocumentEx","context","activeElement","_dismissTimerId","_async","setTimeout","element","delay","doc","overflowElement","clientWidth","scrollWidth","hasHorizontalOverflow","clientHeight","scrollHeight","hasVerticalOverflow","portalContainsElement","zero","delayTime","_getDelayTime","_openTimerId","_onTooltipMouseLeave","closeDelay","_onTooltipKeyDown","which","KeyCodes","escape","ctrlKey","isTooltipVisible","stopPropagation","clearTimeout","setState","onTooltipToggle","long","initializeComponentRef","isAriaPlaceholderRendered","children","hostClassName","setAriaDescribedBy","tooltipProps","tooltipId","tooltipRenderProps","concat","assign","onDismiss","tooltipContent","showTooltip","ariaDescribedBy","onFocusCapture","onBlurCapture","onKeyDown","role","hidden","style","hiddenContentStyle","componentDidMount","Async","componentWillUnmount","dispose","contextType","WindowContext","GlobalClassNames","ariaPlaceholder","TooltipHost","getGlobalClassNames","display","SeparatorBase","vertical","alignContent","Separator","alignStart","alignCenter","alignEnd","textAlign","verticalAlign","height","backgroundColor","palette","neutralLighter","width","HighContrastSelector","bodyText","bodyBackground","linkColor","linkInteractedColor","linkHovered","linkDisabledColor","disabledText","focusBorderColor","focusBorder","outline","textDecoration","IsFocusVisibleClassName","borderBottom","border","cursor","textOverflow","userSelect","_c","forcedColorAdjust","_d","MsHighContrastAdjust","_e","pointerEvents","_f","_g"],"sourceRoot":""}