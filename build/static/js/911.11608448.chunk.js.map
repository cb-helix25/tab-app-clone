{"version":3,"file":"static/js/911.11608448.chunk.js","mappings":"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","sources":["tabs/CallHub/callHubApi.ts","tabs/CallHub/CallHub.tsx"],"sourcesContent":["import { CallEvent, ClientInfo } from './types';\r\n\r\n/**\r\n * Send a Call Hub event to the backend.\r\n * The backend can process actions such as claim, contact and save.\r\n */\r\nexport async function sendCallEvent(event: CallEvent): Promise<void> {\r\n    const resp = await fetch('/api/callhub/events', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(event),\r\n    });\r\n    if (!resp.ok) {\r\n        const message = await resp.text();\r\n        throw new Error(message || 'Failed to send call event');\r\n    }\r\n}\r\n\r\n/**\r\n * Lookup client information by phone number. Returns null if no client found.\r\n */\r\nexport async function lookupClient(countryCode: string, phone: string): Promise<ClientInfo | null> {\r\n    const resp = await fetch(\r\n        `/api/callhub/client?countryCode=${encodeURIComponent(countryCode)}&phone=${encodeURIComponent(phone)}`\r\n    );\r\n    if (resp.status === 404) {\r\n        return null;\r\n    }\r\n    if (!resp.ok) {\r\n        throw new Error('Client lookup failed');\r\n    }\r\n    return resp.json();\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport {\r\n    Stack,\r\n    TextField,\r\n    PrimaryButton,\r\n    MessageBar,\r\n    MessageBarType,\r\n    Dropdown,\r\n    IDropdownOption,\r\n    Checkbox,\r\n} from '@fluentui/react';\r\nimport '../../app/styles/MatterOpeningCard.css';\r\nimport { sendCallEvent, lookupClient } from './callHubApi';\r\nimport { EnquiryType, ContactPreference, ClientInfo, CallKind } from './types';\r\n\r\nconst CallHub: React.FC = () => {\r\n    const [callKind, setCallKind] = useState<CallKind | null>(null);\r\n    const [enquiryType, setEnquiryType] = useState<EnquiryType | null>(null);\r\n    const [contactPreference, setContactPreference] = useState<ContactPreference | null>('email');\r\n    const [email, setEmail] = useState('');\r\n    const [contactPhone, setContactPhone] = useState('');\r\n    const [firstName, setFirstName] = useState('');\r\n    const [lastName, setLastName] = useState('');\r\n    const [notes, setNotes] = useState('');\r\n    const [countryCode, setCountryCode] = useState('+44');\r\n    const [clientInfo, setClientInfo] = useState<ClientInfo | null>(null);\r\n    const [lookupStatus, setLookupStatus] = useState<string | null>(null);\r\n    const [claimTime, setClaimTime] = useState<number | null>(null);\r\n    const [contactTime, setContactTime] = useState<number | null>(null);\r\n    const [abandonTime, setAbandonTime] = useState<number | null>(null);\r\n    const [saving, setSaving] = useState(false);\r\n    const [saveError, setSaveError] = useState<string | null>(null);\r\n    const [saveSuccess, setSaveSuccess] = useState(false);\r\n\r\n    const [teamMember, setTeamMember] = useState<string | undefined>();\r\n    const [ccTeamMember, setCcTeamMember] = useState('');\r\n    const [urgent, setUrgent] = useState(false);\r\n    const [urgentReason, setUrgentReason] = useState('');\r\n    const [callerCategory, setCallerCategory] = useState<string | undefined>();\r\n    const [messageFrom, setMessageFrom] = useState<string | undefined>();\r\n    const [areaOfWork, setAreaOfWork] = useState<string | undefined>();\r\n    const [valueInDispute, setValueInDispute] = useState<string | undefined>();\r\n    const [prospectDescription, setProspectDescription] = useState<string | undefined>();\r\n    const [constructionOrHomeOwner, setConstructionOrHomeOwner] = useState<string | undefined>();\r\n    const [propertyProfessional, setPropertyProfessional] = useState<string | undefined>();\r\n    const [heardAboutUs, setHeardAboutUs] = useState<string | undefined>();\r\n    const [searchTerm, setSearchTerm] = useState('');\r\n    const [webPageVisited, setWebPageVisited] = useState('');\r\n\r\n    useEffect(() => {\r\n        if (callKind !== 'message' || enquiryType !== 'existing') {\r\n            setClientInfo(null);\r\n            setLookupStatus(null);\r\n        }\r\n    }, [callKind, enquiryType]);\r\n\r\n    const countryCodeOptions: IDropdownOption[] = [\r\n        { key: '+44', text: '+44' },\r\n        { key: '+1', text: '+1' },\r\n        { key: '+61', text: '+61' },\r\n        { key: '+353', text: '+353' },\r\n    ];\r\n\r\n    const callerOptions: IDropdownOption[] = [\r\n        { key: 'property-owner', text: 'Property Owner' },\r\n        { key: 'tenant', text: 'Tenant' },\r\n        { key: 'director', text: 'Director' },\r\n        { key: 'company-owner', text: 'Company Owner' },\r\n        { key: 'construction-professional', text: 'Construction or Property Professional' },\r\n        { key: 'solicitor', text: 'Solicitor' },\r\n        { key: 'other', text: 'Unsure/Other' },\r\n    ];\r\n\r\n    const messageFromOptions: IDropdownOption[] = [\r\n        { key: 'client', text: 'Client' },\r\n        { key: 'opponent', text: 'Opponent' },\r\n        { key: 'court', text: 'Court' },\r\n        { key: 'other', text: 'Other' },\r\n        { key: 'uncertain', text: 'Uncertain' },\r\n    ];\r\n\r\n    const teamOptions: IDropdownOption[] = [\r\n        { key: 'Alex Cook', text: 'Alex Cook' },\r\n        { key: \"Bianca O'Donnell\", text: \"Bianca O'Donnell\" },\r\n        { key: 'Sam Packwood', text: 'Sam Packwood' },\r\n    ];\r\n\r\n    const areaOfWorkOptions: IDropdownOption[] = [\r\n        { key: 'commercial', text: 'commercial' },\r\n        { key: 'construction', text: 'construction' },\r\n        { key: 'employment', text: 'employment' },\r\n        { key: 'property', text: 'property' },\r\n        { key: 'other', text: 'other / unsure' },\r\n    ];\r\n\r\n    const valueOptions: IDropdownOption[] = [\r\n        { key: 'lt10', text: 'Less than £10,000' },\r\n        { key: '10-50', text: '£10,000 to £50,000' },\r\n        { key: '50-100', text: '£50,000 to £100,000' },\r\n        { key: 'gt100', text: 'Greater than £100,000' },\r\n        { key: 'other', text: 'The claim is for something other than money' },\r\n        { key: 'unsure', text: 'unsure' },\r\n    ];\r\n\r\n    const prospectOptions: IDropdownOption[] = [\r\n        { key: 'property-owner', text: 'Property Owner' },\r\n        { key: 'tenant', text: 'Tenant' },\r\n        { key: 'director', text: 'Director' },\r\n        { key: 'company-owner', text: 'Company Owner' },\r\n        { key: 'construction-professional', text: 'Construction or Property Professional' },\r\n        { key: 'solicitor', text: 'Solicitor' },\r\n        { key: 'other', text: 'Other' },\r\n    ];\r\n\r\n    const constructionHomeOptions: IDropdownOption[] = [\r\n        { key: 'construction-professional', text: 'Construction Professional' },\r\n        { key: 'home-owner', text: 'Home Owner' },\r\n        { key: 'none', text: 'None of these' },\r\n    ];\r\n\r\n    const propertyLandlordTenantOptions: IDropdownOption[] = [\r\n        { key: 'property-professional', text: 'Property Professional' },\r\n        { key: 'landlord', text: 'Landlord' },\r\n        { key: 'tenant', text: 'Tenant' },\r\n        { key: 'none', text: 'None of these' },\r\n    ];\r\n\r\n    const hearAboutOptions: IDropdownOption[] = [\r\n        { key: 'google', text: 'google search' },\r\n        { key: 'following', text: 'team/firm following' },\r\n        { key: 'referral', text: 'referral' },\r\n        { key: 'other', text: 'other' },\r\n    ];\r\n\r\n    const handleClaim = async () => {\r\n        const now = Date.now();\r\n        setClaimTime(now);\r\n        try {\r\n            await sendCallEvent({\r\n                action: 'claim',\r\n                callKind,\r\n                enquiryType,\r\n                contactPreference,\r\n                email,\r\n                contactPhone,\r\n                callerFirstName: firstName,\r\n                callerLastName: lastName,\r\n                claimTime: now,\r\n            });\r\n        } catch (err) {\r\n            console.error(err);\r\n        }\r\n    };\r\n\r\n    const handleContacted = async () => {\r\n        if (!claimTime) return;\r\n        const now = Date.now();\r\n        setContactTime(now);\r\n        try {\r\n            await sendCallEvent({\r\n                action: 'contact',\r\n                callKind,\r\n                enquiryType,\r\n                contactPreference,\r\n                email,\r\n                contactPhone,\r\n                callerFirstName: firstName,\r\n                callerLastName: lastName,\r\n                claimTime,\r\n                contactTime: now,\r\n            });\r\n        } catch (err) {\r\n            console.error(err);\r\n        }\r\n    };\r\n\r\n    const handleAbandon = async () => {\r\n        if (!claimTime) return;\r\n        const now = Date.now();\r\n        setAbandonTime(now);\r\n        try {\r\n            await sendCallEvent({\r\n                action: 'abandon',\r\n                callKind,\r\n                enquiryType,\r\n                contactPreference,\r\n                email,\r\n                contactPhone,\r\n                callerFirstName: firstName,\r\n                callerLastName: lastName,\r\n                claimTime,\r\n                abandonTime: now,\r\n            });\r\n        } catch (err) {\r\n            console.error(err);\r\n        }\r\n    };\r\n\r\n    const handleSave = async () => {\r\n        setSaving(true);\r\n        setSaveError(null);\r\n        setSaveSuccess(false);\r\n        try {\r\n            await sendCallEvent({\r\n                action: 'save',\r\n                callKind,\r\n                enquiryType,\r\n                contactPreference,\r\n                email,\r\n                contactPhone,\r\n                callerFirstName: firstName,\r\n                callerLastName: lastName,\r\n                notes,\r\n                claimTime,\r\n                contactTime,\r\n                abandonTime,\r\n                teamMember,\r\n                ccTeamMember,\r\n                urgent,\r\n                urgentReason,\r\n                callerCategory,\r\n                messageFrom,\r\n                areaOfWork,\r\n                valueInDispute,\r\n                prospectDescription,\r\n                constructionOrHomeOwner,\r\n                propertyProfessional,\r\n                heardAboutUs,\r\n                searchTerm,\r\n                webPageVisited,\r\n            });\r\n            setSaveSuccess(true);\r\n        } catch (err: any) {\r\n            setSaveError(err.message || 'Unable to save call');\r\n        } finally {\r\n            setSaving(false);\r\n        }\r\n    };\r\n\r\n    const handleLookup = async () => {\r\n        setLookupStatus(null);\r\n        try {\r\n            const info = await lookupClient(countryCode, contactPhone);\r\n            if (info) {\r\n                setClientInfo(info);\r\n                if (info.email) {\r\n                    setEmail(info.email);\r\n                }\r\n            } else {\r\n                setClientInfo(null);\r\n                setLookupStatus('No client found');\r\n            }\r\n        } catch (err) {\r\n            setLookupStatus('Lookup failed');\r\n        }\r\n    };\r\n\r\n    const formatDuration = (start: number, end: number) => {\r\n        const ms = end - start;\r\n        return `${(ms / 1000 / 60).toFixed(1)} mins`;\r\n    };\r\n\r\n    const missingEmail = (callKind === 'enquiry' || contactPreference === 'email') && !email;\r\n    const canSave =\r\n        !!callKind &&\r\n        (callKind !== 'message' || !!enquiryType) &&\r\n        !!contactPreference &&\r\n        !!contactPhone &&\r\n        !!firstName &&\r\n        !!lastName &&\r\n        !missingEmail &&\r\n        !saving &&\r\n        !abandonTime;\r\n\r\n    return (\r\n        <div style={{ padding: 20 }}>\r\n            <div className=\"matter-opening-card\">\r\n                <div className=\"step-header active\">\r\n                    <span className=\"step-title\">Call Hub</span>\r\n                </div>\r\n                <div className=\"step-content active\">\r\n                    <Stack tokens={{ childrenGap: 20 }}>\r\n                        <div className=\"client-type-selection\">\r\n                            <div\r\n                                className={`client-type-icon-btn${callKind === 'enquiry' ? ' active' : ''}`}\r\n                                onClick={() => {\r\n                                    setCallKind('enquiry');\r\n                                    setEnquiryType('new');\r\n                                    setContactPreference('email');\r\n                                }}\r\n                            >\r\n                                <span className=\"client-type-label\">New Enquiry</span>\r\n                            </div>\r\n                            <div\r\n                                className={`client-type-icon-btn${callKind === 'message' ? ' active' : ''}`}\r\n                                onClick={() => {\r\n                                    setCallKind('message');\r\n                                    setEnquiryType(null);\r\n                                    setContactPreference('phone');\r\n                                }}\r\n                            >\r\n                                <span className=\"client-type-label\">Telephone Message</span>\r\n                            </div>\r\n                        </div>\r\n\r\n                        {callKind === 'message' && (\r\n                            <div className=\"client-type-selection\">\r\n                                <div\r\n                                    className={`client-type-icon-btn${enquiryType === 'existing' ? ' active' : ''}`}\r\n                                    onClick={() => setEnquiryType('existing')}\r\n                                >\r\n                                    <span className=\"client-type-label\">Existing Client</span>\r\n                                </div>\r\n                                <div\r\n                                    className={`client-type-icon-btn${enquiryType === 'expert' ? ' active' : ''}`}\r\n                                    onClick={() => setEnquiryType('expert')}\r\n                                >\r\n                                    <span className=\"client-type-label\">Expert</span>\r\n                                </div>\r\n                                <div\r\n                                    className={`client-type-icon-btn${enquiryType === 'other' ? ' active' : ''}`}\r\n                                    onClick={() => setEnquiryType('other')}\r\n                                >\r\n                                    <span className=\"client-type-label\">Other</span>\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n\r\n                        {(callKind === 'enquiry' || (callKind === 'message' && enquiryType)) && (\r\n                            <>\r\n                                <Stack horizontal tokens={{ childrenGap: 8 }}>\r\n                                    <TextField\r\n                                        label=\"First Name\"\r\n                                        value={firstName}\r\n                                        onChange={(_, v) => setFirstName(v || '')}\r\n                                    />\r\n                                    <TextField\r\n                                        label=\"Last Name\"\r\n                                        value={lastName}\r\n                                        onChange={(_, v) => setLastName(v || '')}\r\n                                    />\r\n                                </Stack>\r\n\r\n                                <Stack tokens={{ childrenGap: 8 }}>\r\n                                    <Stack horizontal tokens={{ childrenGap: 8 }}>\r\n                                        <Dropdown\r\n                                            label=\"Code\"\r\n                                            selectedKey={countryCode}\r\n                                            options={countryCodeOptions}\r\n                                            onChange={(_, o) => setCountryCode(o?.key as string)}\r\n                                            styles={{ dropdown: { width: 110 } }}\r\n                                        />\r\n                                        <TextField\r\n                                            label=\"Phone Number\"\r\n                                            value={contactPhone}\r\n                                            onChange={(_, v) => setContactPhone(v || '')}\r\n                                        />\r\n                                        <PrimaryButton\r\n                                            text=\"Lookup Client\"\r\n                                            onClick={handleLookup}\r\n                                            disabled={!(callKind === 'message' && enquiryType === 'existing')}\r\n                                        />\r\n                                    </Stack>\r\n                                    {lookupStatus && (\r\n                                        <MessageBar messageBarType={MessageBarType.warning}>{lookupStatus}</MessageBar>\r\n                                    )}\r\n                                    {clientInfo && (\r\n                                        <div>\r\n                                            <div>\r\n                                                <strong>Point of Contact:</strong> {clientInfo.name} ({clientInfo.email})\r\n                                            </div>\r\n                                            <div>\r\n                                                <strong>Matters</strong>\r\n                                                <ul>\r\n                                                    {clientInfo.matters.map(m => (\r\n                                                        <li key={m}>{m}</li>\r\n                                                    ))}\r\n                                                </ul>\r\n                                            </div>\r\n                                        </div>\r\n                                    )}\r\n                                </Stack>\r\n\r\n                                {(callKind === 'enquiry' || contactPreference === 'email') && (\r\n                                    <TextField\r\n                                        label=\"Email\"\r\n                                        value={email}\r\n                                        onChange={(_, v) => setEmail(v || '')}\r\n                                        required={callKind === 'enquiry' || contactPreference === 'email'}\r\n                                        description=\r\n                                            {callKind === 'enquiry'\r\n                                                ? 'Decline enquiry if prospect refuses to give email address unless they genuinely do not have one.'\r\n                                                : undefined}\r\n                                    />\r\n                                )}\r\n\r\n                                <div className=\"client-type-selection\">\r\n                                    <div\r\n                                        className={`client-type-icon-btn${contactPreference === 'email' ? ' active' : ''}`}\r\n                                        onClick={() => setContactPreference('email')}\r\n                                    >\r\n                                        <span className=\"client-type-label\">Email</span>\r\n                                    </div>\r\n                                    <div\r\n                                        className={`client-type-icon-btn${contactPreference === 'phone' ? ' active' : ''}`}\r\n                                        onClick={() => setContactPreference('phone')}\r\n                                    >\r\n                                        <span className=\"client-type-label\">Phone</span>\r\n                                    </div>\r\n                                </div>\r\n\r\n                                {missingEmail && (\r\n                                    <div style={{ color: 'red' }}>Cannot proceed without an email address.</div>\r\n                                )}\r\n\r\n                                <Dropdown\r\n                                    label=\"Which best describes caller?\"\r\n                                    options={callerOptions}\r\n                                    selectedKey={callerCategory}\r\n                                    onChange={(_, o) => setCallerCategory(o?.key as string)}\r\n                                />\r\n\r\n                                {callKind === 'message' && (\r\n                                    <>\r\n                                        <Dropdown\r\n                                            label=\"Who is the message from?\"\r\n                                            options={messageFromOptions}\r\n                                            selectedKey={messageFrom}\r\n                                            onChange={(_, o) => setMessageFrom(o?.key as string)}\r\n                                        />\r\n                                        <Dropdown\r\n                                            label=\"Message for\"\r\n                                            options={teamOptions}\r\n                                            selectedKey={teamMember}\r\n                                            onChange={(_, o) => setTeamMember(o?.key as string)}\r\n                                        />\r\n                                        <TextField\r\n                                            label=\"CC\"\r\n                                            value={ccTeamMember}\r\n                                            onChange={(_, v) => setCcTeamMember(v || '')}\r\n                                        />\r\n                                        <Checkbox\r\n                                            label=\"Urgent\"\r\n                                            checked={urgent}\r\n                                            onChange={(_, checked) => setUrgent(!!checked)}\r\n                                        />\r\n                                        {urgent && (\r\n                                            <TextField\r\n                                                label=\"Urgency Reason\"\r\n                                                value={urgentReason}\r\n                                                onChange={(_, v) => setUrgentReason(v || '')}\r\n                                            />\r\n                                        )}\r\n                                    </>\r\n                                )}\r\n\r\n                                {callKind === 'enquiry' && (\r\n                                    <>\r\n                                        <Dropdown\r\n                                            label=\"Area of Work\"\r\n                                            options={areaOfWorkOptions}\r\n                                            selectedKey={areaOfWork}\r\n                                            onChange={(_, o) => setAreaOfWork(o?.key as string)}\r\n                                        />\r\n                                        <Dropdown\r\n                                            label=\"Value in Dispute\"\r\n                                            options={valueOptions}\r\n                                            selectedKey={valueInDispute}\r\n                                            onChange={(_, o) => setValueInDispute(o?.key as string)}\r\n                                        />\r\n                                        <Dropdown\r\n                                            label=\"Which best describes you?\"\r\n                                            options={prospectOptions}\r\n                                            selectedKey={prospectDescription}\r\n                                            onChange={(_, o) => setProspectDescription(o?.key as string)}\r\n                                        />\r\n                                        <Dropdown\r\n                                            label=\"Is the prospect a Construction Professional or a Home Owner?\"\r\n                                            options={constructionHomeOptions}\r\n                                            selectedKey={constructionOrHomeOwner}\r\n                                            onChange={(_, o) => setConstructionOrHomeOwner(o?.key as string)}\r\n                                        />\r\n                                        <Dropdown\r\n                                            label=\"Is the prospect a Property Professional, Landlord, or a Tenant?\"\r\n                                            options={propertyLandlordTenantOptions}\r\n                                            selectedKey={propertyProfessional}\r\n                                            onChange={(_, o) => setPropertyProfessional(o?.key as string)}\r\n                                        />\r\n                                        <Dropdown\r\n                                            label=\"How did you hear about us?\"\r\n                                            options={hearAboutOptions}\r\n                                            selectedKey={heardAboutUs}\r\n                                            onChange={(_, o) => setHeardAboutUs(o?.key as string)}\r\n                                        />\r\n                                        <TextField\r\n                                            label=\"Search Term Used\"\r\n                                            description=\"What exactly did the caller search for? (e.g., 'commercial dispute solicitor')\"\r\n                                            value={searchTerm}\r\n                                            onChange={(_, v) => setSearchTerm(v || '')}\r\n                                        />\r\n                                        <TextField\r\n                                            label=\"Web Page Visited\"\r\n                                            description=\"If known, what page were they looking at? (e.g., helix-law.com/commercial)\"\r\n                                            value={webPageVisited}\r\n                                            onChange={(_, v) => setWebPageVisited(v || '')}\r\n                                        />\r\n                                    </>\r\n                                )}\r\n\r\n                                <TextField\r\n                                    label={callKind === 'message' ? 'Telephone Message' : 'Notes'}\r\n                                    multiline\r\n                                    value={notes}\r\n                                    onChange={(_, v) => setNotes(v || '')}\r\n                                />\r\n                            </>\r\n                        )}\r\n\r\n                        {callKind === 'enquiry' && (\r\n                            <div>\r\n                                <strong>Contact Options</strong>\r\n                                <ul>\r\n                                    <li>Email – ~1hr response</li>\r\n                                    <li>WhatsApp – ~1hr response</li>\r\n                                    <li>Calendly – schedule a call</li>\r\n                                    <li>Voicemail – we will return your call</li>\r\n                                </ul>\r\n                            </div>\r\n                        )}\r\n\r\n                        <Stack horizontal tokens={{ childrenGap: 10 }}>\r\n                            <PrimaryButton text=\"Claim Enquiry\" onClick={handleClaim} disabled={!!claimTime} />\r\n                            <PrimaryButton text=\"Mark Contacted\" onClick={handleContacted} disabled={!claimTime || !!contactTime} />\r\n                            <PrimaryButton\r\n                                text=\"Abandon Call\"\r\n                                onClick={handleAbandon}\r\n                                disabled={!claimTime || !!contactTime || !!abandonTime}\r\n                            />\r\n                            <PrimaryButton text=\"Save Call\" onClick={handleSave} disabled={!canSave} />\r\n                        </Stack>\r\n\r\n                        {claimTime && <div>Claimed at {new Date(claimTime).toLocaleTimeString()}</div>}\r\n                        {claimTime && contactTime && (\r\n                            <div>Time to contact: {formatDuration(claimTime, contactTime)}</div>\r\n                        )}\r\n                        {claimTime && abandonTime && (\r\n                            <div>Time to abandon: {formatDuration(claimTime, abandonTime)}</div>\r\n                        )}\r\n                        {abandonTime && (\r\n                            <div>Abandoned at {new Date(abandonTime).toLocaleTimeString()}</div>\r\n                        )}\r\n                        {saveSuccess && (\r\n                            <MessageBar messageBarType={MessageBarType.success} onDismiss={() => setSaveSuccess(false)}>\r\n                                Call saved\r\n                            </MessageBar>\r\n                        )}\r\n                        {saveError && (\r\n                            <MessageBar messageBarType={MessageBarType.error} onDismiss={() => setSaveError(null)}>\r\n                                {saveError}\r\n                            </MessageBar>\r\n                        )}\r\n                    </Stack>\r\n                </div>\r\n            </div>\r\n            <style>{`\r\n          .client-type-selection {\r\n            display: flex;\r\n            gap: 8px;\r\n          }\r\n          .client-type-icon-btn {\r\n            flex: 1;\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n            padding: 14.4px 8px;\r\n            border: 1px solid #e0e0e0;\r\n            background: #f8f8f8;\r\n            cursor: pointer;\r\n            transition: all 0.2s ease;\r\n          }\r\n          .client-type-icon-btn .client-type-label {\r\n            pointer-events: none;\r\n          }\r\n          .client-type-icon-btn:not(.active):hover {\r\n            background: #e3f0fc;\r\n            border-color: #3690CE;\r\n          }\r\n          .client-type-icon-btn.active {\r\n            background: #e3f0fc;\r\n            border-color: #3690CE;\r\n            color: #3690CE;\r\n            font-weight: 600;\r\n            box-shadow: 0 2px 4px rgba(0,0,0,0.1);\r\n          }\r\n        `}</style>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CallHub;\r\n"],"names":["async","sendCallEvent","event","resp","fetch","method","headers","body","JSON","stringify","ok","message","text","Error","CallHub","callKind","setCallKind","useState","enquiryType","setEnquiryType","contactPreference","setContactPreference","email","setEmail","contactPhone","setContactPhone","firstName","setFirstName","lastName","setLastName","notes","setNotes","countryCode","setCountryCode","clientInfo","setClientInfo","lookupStatus","setLookupStatus","claimTime","setClaimTime","contactTime","setContactTime","abandonTime","setAbandonTime","saving","setSaving","saveError","setSaveError","saveSuccess","setSaveSuccess","teamMember","setTeamMember","ccTeamMember","setCcTeamMember","urgent","setUrgent","urgentReason","setUrgentReason","callerCategory","setCallerCategory","messageFrom","setMessageFrom","areaOfWork","setAreaOfWork","valueInDispute","setValueInDispute","prospectDescription","setProspectDescription","constructionOrHomeOwner","setConstructionOrHomeOwner","propertyProfessional","setPropertyProfessional","heardAboutUs","setHeardAboutUs","searchTerm","setSearchTerm","webPageVisited","setWebPageVisited","useEffect","formatDuration","start","end","toFixed","missingEmail","canSave","_jsxs","style","padding","children","className","_jsx","Stack","tokens","childrenGap","onClick","_Fragment","horizontal","TextField","label","value","onChange","_","v","Dropdown","selectedKey","options","key","o","styles","dropdown","width","PrimaryButton","info","phone","encodeURIComponent","status","json","lookupClient","err","disabled","MessageBar","messageBarType","MessageBarType","warning","name","matters","map","m","required","description","undefined","color","Checkbox","checked","multiline","now","Date","action","callerFirstName","callerLastName","console","error","toLocaleTimeString","success","onDismiss"],"sourceRoot":""}